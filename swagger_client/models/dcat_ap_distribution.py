# coding: utf-8

"""
    FastAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DcatAPDistribution(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'object',
        'type': 'object',
        'dcataccess_url': 'object',
        'dcatbyte_size': 'object',
        'spdxchecksum': 'DcatAPIdentifier',
        'dctdescription': 'object',
        'dcatdownload_url': 'object',
        'dctformat': 'object',
        'dctlicense': 'object',
        'dcttitle': 'object'
    }

    attribute_map = {
        'id': '@id',
        'type': '@type',
        'dcataccess_url': 'dcat:accessURL',
        'dcatbyte_size': 'dcat:byteSize',
        'spdxchecksum': 'spdx:checksum',
        'dctdescription': 'dct:description',
        'dcatdownload_url': 'dcat:downloadURL',
        'dctformat': 'dct:format',
        'dctlicense': 'dct:license',
        'dcttitle': 'dct:title'
    }

    def __init__(self, id=None, type=None, dcataccess_url=None, dcatbyte_size=None, spdxchecksum=None, dctdescription=None, dcatdownload_url=None, dctformat=None, dctlicense=None, dcttitle=None):  # noqa: E501
        """DcatAPDistribution - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._type = None
        self._dcataccess_url = None
        self._dcatbyte_size = None
        self._spdxchecksum = None
        self._dctdescription = None
        self._dcatdownload_url = None
        self._dctformat = None
        self._dctlicense = None
        self._dcttitle = None
        self.discriminator = None
        self.id = id
        if type is not None:
            self.type = type
        if dcataccess_url is not None:
            self.dcataccess_url = dcataccess_url
        if dcatbyte_size is not None:
            self.dcatbyte_size = dcatbyte_size
        if spdxchecksum is not None:
            self.spdxchecksum = spdxchecksum
        if dctdescription is not None:
            self.dctdescription = dctdescription
        if dcatdownload_url is not None:
            self.dcatdownload_url = dcatdownload_url
        if dctformat is not None:
            self.dctformat = dctformat
        if dctlicense is not None:
            self.dctlicense = dctlicense
        if dcttitle is not None:
            self.dcttitle = dcttitle

    @property
    def id(self):
        """Gets the id of this DcatAPDistribution.  # noqa: E501


        :return: The id of this DcatAPDistribution.  # noqa: E501
        :rtype: object
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DcatAPDistribution.


        :param id: The id of this DcatAPDistribution.  # noqa: E501
        :type: object
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def type(self):
        """Gets the type of this DcatAPDistribution.  # noqa: E501


        :return: The type of this DcatAPDistribution.  # noqa: E501
        :rtype: object
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DcatAPDistribution.


        :param type: The type of this DcatAPDistribution.  # noqa: E501
        :type: object
        """

        self._type = type

    @property
    def dcataccess_url(self):
        """Gets the dcataccess_url of this DcatAPDistribution.  # noqa: E501


        :return: The dcataccess_url of this DcatAPDistribution.  # noqa: E501
        :rtype: object
        """
        return self._dcataccess_url

    @dcataccess_url.setter
    def dcataccess_url(self, dcataccess_url):
        """Sets the dcataccess_url of this DcatAPDistribution.


        :param dcataccess_url: The dcataccess_url of this DcatAPDistribution.  # noqa: E501
        :type: object
        """

        self._dcataccess_url = dcataccess_url

    @property
    def dcatbyte_size(self):
        """Gets the dcatbyte_size of this DcatAPDistribution.  # noqa: E501


        :return: The dcatbyte_size of this DcatAPDistribution.  # noqa: E501
        :rtype: object
        """
        return self._dcatbyte_size

    @dcatbyte_size.setter
    def dcatbyte_size(self, dcatbyte_size):
        """Sets the dcatbyte_size of this DcatAPDistribution.


        :param dcatbyte_size: The dcatbyte_size of this DcatAPDistribution.  # noqa: E501
        :type: object
        """

        self._dcatbyte_size = dcatbyte_size

    @property
    def spdxchecksum(self):
        """Gets the spdxchecksum of this DcatAPDistribution.  # noqa: E501


        :return: The spdxchecksum of this DcatAPDistribution.  # noqa: E501
        :rtype: DcatAPIdentifier
        """
        return self._spdxchecksum

    @spdxchecksum.setter
    def spdxchecksum(self, spdxchecksum):
        """Sets the spdxchecksum of this DcatAPDistribution.


        :param spdxchecksum: The spdxchecksum of this DcatAPDistribution.  # noqa: E501
        :type: DcatAPIdentifier
        """

        self._spdxchecksum = spdxchecksum

    @property
    def dctdescription(self):
        """Gets the dctdescription of this DcatAPDistribution.  # noqa: E501


        :return: The dctdescription of this DcatAPDistribution.  # noqa: E501
        :rtype: object
        """
        return self._dctdescription

    @dctdescription.setter
    def dctdescription(self, dctdescription):
        """Sets the dctdescription of this DcatAPDistribution.


        :param dctdescription: The dctdescription of this DcatAPDistribution.  # noqa: E501
        :type: object
        """

        self._dctdescription = dctdescription

    @property
    def dcatdownload_url(self):
        """Gets the dcatdownload_url of this DcatAPDistribution.  # noqa: E501


        :return: The dcatdownload_url of this DcatAPDistribution.  # noqa: E501
        :rtype: object
        """
        return self._dcatdownload_url

    @dcatdownload_url.setter
    def dcatdownload_url(self, dcatdownload_url):
        """Sets the dcatdownload_url of this DcatAPDistribution.


        :param dcatdownload_url: The dcatdownload_url of this DcatAPDistribution.  # noqa: E501
        :type: object
        """

        self._dcatdownload_url = dcatdownload_url

    @property
    def dctformat(self):
        """Gets the dctformat of this DcatAPDistribution.  # noqa: E501


        :return: The dctformat of this DcatAPDistribution.  # noqa: E501
        :rtype: object
        """
        return self._dctformat

    @dctformat.setter
    def dctformat(self, dctformat):
        """Sets the dctformat of this DcatAPDistribution.


        :param dctformat: The dctformat of this DcatAPDistribution.  # noqa: E501
        :type: object
        """

        self._dctformat = dctformat

    @property
    def dctlicense(self):
        """Gets the dctlicense of this DcatAPDistribution.  # noqa: E501


        :return: The dctlicense of this DcatAPDistribution.  # noqa: E501
        :rtype: object
        """
        return self._dctlicense

    @dctlicense.setter
    def dctlicense(self, dctlicense):
        """Sets the dctlicense of this DcatAPDistribution.


        :param dctlicense: The dctlicense of this DcatAPDistribution.  # noqa: E501
        :type: object
        """

        self._dctlicense = dctlicense

    @property
    def dcttitle(self):
        """Gets the dcttitle of this DcatAPDistribution.  # noqa: E501


        :return: The dcttitle of this DcatAPDistribution.  # noqa: E501
        :rtype: object
        """
        return self._dcttitle

    @dcttitle.setter
    def dcttitle(self, dcttitle):
        """Sets the dcttitle of this DcatAPDistribution.


        :param dcttitle: The dcttitle of this DcatAPDistribution.  # noqa: E501
        :type: object
        """

        self._dcttitle = dcttitle

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DcatAPDistribution, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DcatAPDistribution):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
