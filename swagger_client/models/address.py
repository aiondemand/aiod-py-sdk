# coding: utf-8

"""
    FastAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Address(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'region': 'object',
        'locality': 'object',
        'street': 'object',
        'postal_code': 'object',
        'address': 'object',
        'country': 'object'
    }

    attribute_map = {
        'region': 'region',
        'locality': 'locality',
        'street': 'street',
        'postal_code': 'postal_code',
        'address': 'address',
        'country': 'country'
    }

    def __init__(self, region=None, locality=None, street=None, postal_code=None, address=None, country=None):  # noqa: E501
        """Address - a model defined in Swagger"""  # noqa: E501
        self._region = None
        self._locality = None
        self._street = None
        self._postal_code = None
        self._address = None
        self._country = None
        self.discriminator = None
        if region is not None:
            self.region = region
        if locality is not None:
            self.locality = locality
        if street is not None:
            self.street = street
        if postal_code is not None:
            self.postal_code = postal_code
        if address is not None:
            self.address = address
        if country is not None:
            self.country = country

    @property
    def region(self):
        """Gets the region of this Address.  # noqa: E501

        A subdivision of the country. Not necessary for most countries.   # noqa: E501

        :return: The region of this Address.  # noqa: E501
        :rtype: object
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this Address.

        A subdivision of the country. Not necessary for most countries.   # noqa: E501

        :param region: The region of this Address.  # noqa: E501
        :type: object
        """

        self._region = region

    @property
    def locality(self):
        """Gets the locality of this Address.  # noqa: E501

        A city, town or village.  # noqa: E501

        :return: The locality of this Address.  # noqa: E501
        :rtype: object
        """
        return self._locality

    @locality.setter
    def locality(self, locality):
        """Sets the locality of this Address.

        A city, town or village.  # noqa: E501

        :param locality: The locality of this Address.  # noqa: E501
        :type: object
        """

        self._locality = locality

    @property
    def street(self):
        """Gets the street of this Address.  # noqa: E501

        The street address.  # noqa: E501

        :return: The street of this Address.  # noqa: E501
        :rtype: object
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this Address.

        The street address.  # noqa: E501

        :param street: The street of this Address.  # noqa: E501
        :type: object
        """

        self._street = street

    @property
    def postal_code(self):
        """Gets the postal_code of this Address.  # noqa: E501

        The postal code.  # noqa: E501

        :return: The postal_code of this Address.  # noqa: E501
        :rtype: object
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this Address.

        The postal code.  # noqa: E501

        :param postal_code: The postal_code of this Address.  # noqa: E501
        :type: object
        """

        self._postal_code = postal_code

    @property
    def address(self):
        """Gets the address of this Address.  # noqa: E501

        Free text, in case the separate parts such as the street, postal code and country cannot be confidently separated.  # noqa: E501

        :return: The address of this Address.  # noqa: E501
        :rtype: object
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Address.

        Free text, in case the separate parts such as the street, postal code and country cannot be confidently separated.  # noqa: E501

        :param address: The address of this Address.  # noqa: E501
        :type: object
        """

        self._address = address

    @property
    def country(self):
        """Gets the country of this Address.  # noqa: E501

        The country as ISO 3166-1 alpha-3  # noqa: E501

        :return: The country of this Address.  # noqa: E501
        :rtype: object
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Address.

        The country as ISO 3166-1 alpha-3  # noqa: E501

        :param country: The country of this Address.  # noqa: E501
        :type: object
        """

        self._country = country

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Address, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Address):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
