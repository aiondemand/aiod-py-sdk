# coding: utf-8

"""
    FastAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AIoDEntryRead(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'editor': 'object',
        'status': 'object',
        'date_modified': 'object',
        'date_created': 'object'
    }

    attribute_map = {
        'editor': 'editor',
        'status': 'status',
        'date_modified': 'date_modified',
        'date_created': 'date_created'
    }

    def __init__(self, editor=None, status=None, date_modified=None, date_created=None):  # noqa: E501
        """AIoDEntryRead - a model defined in Swagger"""  # noqa: E501
        self._editor = None
        self._status = None
        self._date_modified = None
        self._date_created = None
        self.discriminator = None
        if editor is not None:
            self.editor = editor
        if status is not None:
            self.status = status
        if date_modified is not None:
            self.date_modified = date_modified
        if date_created is not None:
            self.date_created = date_created

    @property
    def editor(self):
        """Gets the editor of this AIoDEntryRead.  # noqa: E501

        Links to identifiers of persons responsible for maintaining the entry.  # noqa: E501

        :return: The editor of this AIoDEntryRead.  # noqa: E501
        :rtype: object
        """
        return self._editor

    @editor.setter
    def editor(self, editor):
        """Sets the editor of this AIoDEntryRead.

        Links to identifiers of persons responsible for maintaining the entry.  # noqa: E501

        :param editor: The editor of this AIoDEntryRead.  # noqa: E501
        :type: object
        """

        self._editor = editor

    @property
    def status(self):
        """Gets the status of this AIoDEntryRead.  # noqa: E501

        Status of the entry (published, draft, rejected)  # noqa: E501

        :return: The status of this AIoDEntryRead.  # noqa: E501
        :rtype: object
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AIoDEntryRead.

        Status of the entry (published, draft, rejected)  # noqa: E501

        :param status: The status of this AIoDEntryRead.  # noqa: E501
        :type: object
        """

        self._status = status

    @property
    def date_modified(self):
        """Gets the date_modified of this AIoDEntryRead.  # noqa: E501

        The datetime on which the metadata was last updated in the AIoD platform,in UTC.  Note the difference between `.aiod_entry.date_created` and `.date_published`: the former is automatically set to the datetime the resource was created on AIoD, while the latter can optionally be set to an earlier datetime that the resource was published on an external platform.  # noqa: E501

        :return: The date_modified of this AIoDEntryRead.  # noqa: E501
        :rtype: object
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this AIoDEntryRead.

        The datetime on which the metadata was last updated in the AIoD platform,in UTC.  Note the difference between `.aiod_entry.date_created` and `.date_published`: the former is automatically set to the datetime the resource was created on AIoD, while the latter can optionally be set to an earlier datetime that the resource was published on an external platform.  # noqa: E501

        :param date_modified: The date_modified of this AIoDEntryRead.  # noqa: E501
        :type: object
        """

        self._date_modified = date_modified

    @property
    def date_created(self):
        """Gets the date_created of this AIoDEntryRead.  # noqa: E501

        The datetime on which the metadata was first published on the AIoD platform, in UTC.  # noqa: E501

        :return: The date_created of this AIoDEntryRead.  # noqa: E501
        :rtype: object
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this AIoDEntryRead.

        The datetime on which the metadata was first published on the AIoD platform, in UTC.  # noqa: E501

        :param date_created: The date_created of this AIoDEntryRead.  # noqa: E501
        :type: object
        """

        self._date_created = date_created

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AIoDEntryRead, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AIoDEntryRead):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
