# coding: utf-8

"""
    FastAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RunnableDistribution(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'platform': 'object',
        'platform_resource_identifier': 'object',
        'checksum': 'object',
        'checksum_algorithm': 'object',
        'copyright': 'object',
        'content_url': 'object',
        'content_size_kb': 'object',
        'date_published': 'object',
        'description': 'object',
        'encoding_format': 'object',
        'name': 'object',
        'technology_readiness_level': 'object',
        'installation_script': 'object',
        'installation': 'object',
        'installation_time_milliseconds': 'object',
        'deployment_script': 'object',
        'deployment': 'object',
        'deployment_time_milliseconds': 'object',
        'os_requirement': 'object',
        'dependency': 'object',
        'hardware_requirement': 'object'
    }

    attribute_map = {
        'platform': 'platform',
        'platform_resource_identifier': 'platform_resource_identifier',
        'checksum': 'checksum',
        'checksum_algorithm': 'checksum_algorithm',
        'copyright': 'copyright',
        'content_url': 'content_url',
        'content_size_kb': 'content_size_kb',
        'date_published': 'date_published',
        'description': 'description',
        'encoding_format': 'encoding_format',
        'name': 'name',
        'technology_readiness_level': 'technology_readiness_level',
        'installation_script': 'installation_script',
        'installation': 'installation',
        'installation_time_milliseconds': 'installation_time_milliseconds',
        'deployment_script': 'deployment_script',
        'deployment': 'deployment',
        'deployment_time_milliseconds': 'deployment_time_milliseconds',
        'os_requirement': 'os_requirement',
        'dependency': 'dependency',
        'hardware_requirement': 'hardware_requirement'
    }

    def __init__(self, platform=None, platform_resource_identifier=None, checksum=None, checksum_algorithm=None, copyright=None, content_url=None, content_size_kb=None, date_published=None, description=None, encoding_format=None, name=None, technology_readiness_level=None, installation_script=None, installation=None, installation_time_milliseconds=None, deployment_script=None, deployment=None, deployment_time_milliseconds=None, os_requirement=None, dependency=None, hardware_requirement=None):  # noqa: E501
        """RunnableDistribution - a model defined in Swagger"""  # noqa: E501
        self._platform = None
        self._platform_resource_identifier = None
        self._checksum = None
        self._checksum_algorithm = None
        self._copyright = None
        self._content_url = None
        self._content_size_kb = None
        self._date_published = None
        self._description = None
        self._encoding_format = None
        self._name = None
        self._technology_readiness_level = None
        self._installation_script = None
        self._installation = None
        self._installation_time_milliseconds = None
        self._deployment_script = None
        self._deployment = None
        self._deployment_time_milliseconds = None
        self._os_requirement = None
        self._dependency = None
        self._hardware_requirement = None
        self.discriminator = None
        if platform is not None:
            self.platform = platform
        if platform_resource_identifier is not None:
            self.platform_resource_identifier = platform_resource_identifier
        if checksum is not None:
            self.checksum = checksum
        if checksum_algorithm is not None:
            self.checksum_algorithm = checksum_algorithm
        if copyright is not None:
            self.copyright = copyright
        self.content_url = content_url
        if content_size_kb is not None:
            self.content_size_kb = content_size_kb
        if date_published is not None:
            self.date_published = date_published
        if description is not None:
            self.description = description
        if encoding_format is not None:
            self.encoding_format = encoding_format
        if name is not None:
            self.name = name
        if technology_readiness_level is not None:
            self.technology_readiness_level = technology_readiness_level
        if installation_script is not None:
            self.installation_script = installation_script
        if installation is not None:
            self.installation = installation
        if installation_time_milliseconds is not None:
            self.installation_time_milliseconds = installation_time_milliseconds
        if deployment_script is not None:
            self.deployment_script = deployment_script
        if deployment is not None:
            self.deployment = deployment
        if deployment_time_milliseconds is not None:
            self.deployment_time_milliseconds = deployment_time_milliseconds
        if os_requirement is not None:
            self.os_requirement = os_requirement
        if dependency is not None:
            self.dependency = dependency
        if hardware_requirement is not None:
            self.hardware_requirement = hardware_requirement

    @property
    def platform(self):
        """Gets the platform of this RunnableDistribution.  # noqa: E501

        The external platform from which this resource originates. Leave empty if this item originates from AIoD. If platform is not None, the platform_resource_identifier should be set as well.  # noqa: E501

        :return: The platform of this RunnableDistribution.  # noqa: E501
        :rtype: object
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this RunnableDistribution.

        The external platform from which this resource originates. Leave empty if this item originates from AIoD. If platform is not None, the platform_resource_identifier should be set as well.  # noqa: E501

        :param platform: The platform of this RunnableDistribution.  # noqa: E501
        :type: object
        """

        self._platform = platform

    @property
    def platform_resource_identifier(self):
        """Gets the platform_resource_identifier of this RunnableDistribution.  # noqa: E501

        A unique identifier issued by the external platform that's specified in 'platform'. Leave empty if this item is not part of an external platform.  # noqa: E501

        :return: The platform_resource_identifier of this RunnableDistribution.  # noqa: E501
        :rtype: object
        """
        return self._platform_resource_identifier

    @platform_resource_identifier.setter
    def platform_resource_identifier(self, platform_resource_identifier):
        """Sets the platform_resource_identifier of this RunnableDistribution.

        A unique identifier issued by the external platform that's specified in 'platform'. Leave empty if this item is not part of an external platform.  # noqa: E501

        :param platform_resource_identifier: The platform_resource_identifier of this RunnableDistribution.  # noqa: E501
        :type: object
        """

        self._platform_resource_identifier = platform_resource_identifier

    @property
    def checksum(self):
        """Gets the checksum of this RunnableDistribution.  # noqa: E501

        The value of a checksum algorithm ran on this content.  # noqa: E501

        :return: The checksum of this RunnableDistribution.  # noqa: E501
        :rtype: object
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum):
        """Sets the checksum of this RunnableDistribution.

        The value of a checksum algorithm ran on this content.  # noqa: E501

        :param checksum: The checksum of this RunnableDistribution.  # noqa: E501
        :type: object
        """

        self._checksum = checksum

    @property
    def checksum_algorithm(self):
        """Gets the checksum_algorithm of this RunnableDistribution.  # noqa: E501

        The checksum algorithm.  # noqa: E501

        :return: The checksum_algorithm of this RunnableDistribution.  # noqa: E501
        :rtype: object
        """
        return self._checksum_algorithm

    @checksum_algorithm.setter
    def checksum_algorithm(self, checksum_algorithm):
        """Sets the checksum_algorithm of this RunnableDistribution.

        The checksum algorithm.  # noqa: E501

        :param checksum_algorithm: The checksum_algorithm of this RunnableDistribution.  # noqa: E501
        :type: object
        """

        self._checksum_algorithm = checksum_algorithm

    @property
    def copyright(self):
        """Gets the copyright of this RunnableDistribution.  # noqa: E501


        :return: The copyright of this RunnableDistribution.  # noqa: E501
        :rtype: object
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this RunnableDistribution.


        :param copyright: The copyright of this RunnableDistribution.  # noqa: E501
        :type: object
        """

        self._copyright = copyright

    @property
    def content_url(self):
        """Gets the content_url of this RunnableDistribution.  # noqa: E501


        :return: The content_url of this RunnableDistribution.  # noqa: E501
        :rtype: object
        """
        return self._content_url

    @content_url.setter
    def content_url(self, content_url):
        """Sets the content_url of this RunnableDistribution.


        :param content_url: The content_url of this RunnableDistribution.  # noqa: E501
        :type: object
        """
        if content_url is None:
            raise ValueError("Invalid value for `content_url`, must not be `None`")  # noqa: E501

        self._content_url = content_url

    @property
    def content_size_kb(self):
        """Gets the content_size_kb of this RunnableDistribution.  # noqa: E501


        :return: The content_size_kb of this RunnableDistribution.  # noqa: E501
        :rtype: object
        """
        return self._content_size_kb

    @content_size_kb.setter
    def content_size_kb(self, content_size_kb):
        """Sets the content_size_kb of this RunnableDistribution.


        :param content_size_kb: The content_size_kb of this RunnableDistribution.  # noqa: E501
        :type: object
        """

        self._content_size_kb = content_size_kb

    @property
    def date_published(self):
        """Gets the date_published of this RunnableDistribution.  # noqa: E501

        The datetime (utc) on which this Distribution was first published on an external platform.   # noqa: E501

        :return: The date_published of this RunnableDistribution.  # noqa: E501
        :rtype: object
        """
        return self._date_published

    @date_published.setter
    def date_published(self, date_published):
        """Sets the date_published of this RunnableDistribution.

        The datetime (utc) on which this Distribution was first published on an external platform.   # noqa: E501

        :param date_published: The date_published of this RunnableDistribution.  # noqa: E501
        :type: object
        """

        self._date_published = date_published

    @property
    def description(self):
        """Gets the description of this RunnableDistribution.  # noqa: E501


        :return: The description of this RunnableDistribution.  # noqa: E501
        :rtype: object
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RunnableDistribution.


        :param description: The description of this RunnableDistribution.  # noqa: E501
        :type: object
        """

        self._description = description

    @property
    def encoding_format(self):
        """Gets the encoding_format of this RunnableDistribution.  # noqa: E501

        The mimetype of this file.  # noqa: E501

        :return: The encoding_format of this RunnableDistribution.  # noqa: E501
        :rtype: object
        """
        return self._encoding_format

    @encoding_format.setter
    def encoding_format(self, encoding_format):
        """Sets the encoding_format of this RunnableDistribution.

        The mimetype of this file.  # noqa: E501

        :param encoding_format: The encoding_format of this RunnableDistribution.  # noqa: E501
        :type: object
        """

        self._encoding_format = encoding_format

    @property
    def name(self):
        """Gets the name of this RunnableDistribution.  # noqa: E501


        :return: The name of this RunnableDistribution.  # noqa: E501
        :rtype: object
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RunnableDistribution.


        :param name: The name of this RunnableDistribution.  # noqa: E501
        :type: object
        """

        self._name = name

    @property
    def technology_readiness_level(self):
        """Gets the technology_readiness_level of this RunnableDistribution.  # noqa: E501

        The technology readiness level (TRL) of the distribution. TRL 1 is the lowest and stands for 'Basic principles observed', TRL 9 is the highest and stands for 'actual system proven in operational environment'.  # noqa: E501

        :return: The technology_readiness_level of this RunnableDistribution.  # noqa: E501
        :rtype: object
        """
        return self._technology_readiness_level

    @technology_readiness_level.setter
    def technology_readiness_level(self, technology_readiness_level):
        """Sets the technology_readiness_level of this RunnableDistribution.

        The technology readiness level (TRL) of the distribution. TRL 1 is the lowest and stands for 'Basic principles observed', TRL 9 is the highest and stands for 'actual system proven in operational environment'.  # noqa: E501

        :param technology_readiness_level: The technology_readiness_level of this RunnableDistribution.  # noqa: E501
        :type: object
        """

        self._technology_readiness_level = technology_readiness_level

    @property
    def installation_script(self):
        """Gets the installation_script of this RunnableDistribution.  # noqa: E501

        An url pointing to a script that can be run to setup the environment necessary for running this distribution. This can be a relative url, if this distribution is a file archive.  # noqa: E501

        :return: The installation_script of this RunnableDistribution.  # noqa: E501
        :rtype: object
        """
        return self._installation_script

    @installation_script.setter
    def installation_script(self, installation_script):
        """Sets the installation_script of this RunnableDistribution.

        An url pointing to a script that can be run to setup the environment necessary for running this distribution. This can be a relative url, if this distribution is a file archive.  # noqa: E501

        :param installation_script: The installation_script of this RunnableDistribution.  # noqa: E501
        :type: object
        """

        self._installation_script = installation_script

    @property
    def installation(self):
        """Gets the installation of this RunnableDistribution.  # noqa: E501

        A human readable explanation of the installation, primarily meant as alternative for when there is no installation script.  # noqa: E501

        :return: The installation of this RunnableDistribution.  # noqa: E501
        :rtype: object
        """
        return self._installation

    @installation.setter
    def installation(self, installation):
        """Sets the installation of this RunnableDistribution.

        A human readable explanation of the installation, primarily meant as alternative for when there is no installation script.  # noqa: E501

        :param installation: The installation of this RunnableDistribution.  # noqa: E501
        :type: object
        """

        self._installation = installation

    @property
    def installation_time_milliseconds(self):
        """Gets the installation_time_milliseconds of this RunnableDistribution.  # noqa: E501

        An illustrative time that the installation might typically take.  # noqa: E501

        :return: The installation_time_milliseconds of this RunnableDistribution.  # noqa: E501
        :rtype: object
        """
        return self._installation_time_milliseconds

    @installation_time_milliseconds.setter
    def installation_time_milliseconds(self, installation_time_milliseconds):
        """Sets the installation_time_milliseconds of this RunnableDistribution.

        An illustrative time that the installation might typically take.  # noqa: E501

        :param installation_time_milliseconds: The installation_time_milliseconds of this RunnableDistribution.  # noqa: E501
        :type: object
        """

        self._installation_time_milliseconds = installation_time_milliseconds

    @property
    def deployment_script(self):
        """Gets the deployment_script of this RunnableDistribution.  # noqa: E501

        An url pointing to a script that can be run to use this resource. This can be a relative url, if this distribution is a file archive.  # noqa: E501

        :return: The deployment_script of this RunnableDistribution.  # noqa: E501
        :rtype: object
        """
        return self._deployment_script

    @deployment_script.setter
    def deployment_script(self, deployment_script):
        """Sets the deployment_script of this RunnableDistribution.

        An url pointing to a script that can be run to use this resource. This can be a relative url, if this distribution is a file archive.  # noqa: E501

        :param deployment_script: The deployment_script of this RunnableDistribution.  # noqa: E501
        :type: object
        """

        self._deployment_script = deployment_script

    @property
    def deployment(self):
        """Gets the deployment of this RunnableDistribution.  # noqa: E501

        A human readable explanation of the deployment, primarily meant as alternative for when there is no installation script.  # noqa: E501

        :return: The deployment of this RunnableDistribution.  # noqa: E501
        :rtype: object
        """
        return self._deployment

    @deployment.setter
    def deployment(self, deployment):
        """Sets the deployment of this RunnableDistribution.

        A human readable explanation of the deployment, primarily meant as alternative for when there is no installation script.  # noqa: E501

        :param deployment: The deployment of this RunnableDistribution.  # noqa: E501
        :type: object
        """

        self._deployment = deployment

    @property
    def deployment_time_milliseconds(self):
        """Gets the deployment_time_milliseconds of this RunnableDistribution.  # noqa: E501

        An illustrative time that the deployment might typically take.  # noqa: E501

        :return: The deployment_time_milliseconds of this RunnableDistribution.  # noqa: E501
        :rtype: object
        """
        return self._deployment_time_milliseconds

    @deployment_time_milliseconds.setter
    def deployment_time_milliseconds(self, deployment_time_milliseconds):
        """Sets the deployment_time_milliseconds of this RunnableDistribution.

        An illustrative time that the deployment might typically take.  # noqa: E501

        :param deployment_time_milliseconds: The deployment_time_milliseconds of this RunnableDistribution.  # noqa: E501
        :type: object
        """

        self._deployment_time_milliseconds = deployment_time_milliseconds

    @property
    def os_requirement(self):
        """Gets the os_requirement of this RunnableDistribution.  # noqa: E501

        A human readable explanation for the required os.  # noqa: E501

        :return: The os_requirement of this RunnableDistribution.  # noqa: E501
        :rtype: object
        """
        return self._os_requirement

    @os_requirement.setter
    def os_requirement(self, os_requirement):
        """Sets the os_requirement of this RunnableDistribution.

        A human readable explanation for the required os.  # noqa: E501

        :param os_requirement: The os_requirement of this RunnableDistribution.  # noqa: E501
        :type: object
        """

        self._os_requirement = os_requirement

    @property
    def dependency(self):
        """Gets the dependency of this RunnableDistribution.  # noqa: E501

        A human readable explanation of (software) dependencies.  # noqa: E501

        :return: The dependency of this RunnableDistribution.  # noqa: E501
        :rtype: object
        """
        return self._dependency

    @dependency.setter
    def dependency(self, dependency):
        """Sets the dependency of this RunnableDistribution.

        A human readable explanation of (software) dependencies.  # noqa: E501

        :param dependency: The dependency of this RunnableDistribution.  # noqa: E501
        :type: object
        """

        self._dependency = dependency

    @property
    def hardware_requirement(self):
        """Gets the hardware_requirement of this RunnableDistribution.  # noqa: E501

        A human readable explanation of hardware requirements.  # noqa: E501

        :return: The hardware_requirement of this RunnableDistribution.  # noqa: E501
        :rtype: object
        """
        return self._hardware_requirement

    @hardware_requirement.setter
    def hardware_requirement(self, hardware_requirement):
        """Sets the hardware_requirement of this RunnableDistribution.

        A human readable explanation of hardware requirements.  # noqa: E501

        :param hardware_requirement: The hardware_requirement of this RunnableDistribution.  # noqa: E501
        :type: object
        """

        self._hardware_requirement = hardware_requirement

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RunnableDistribution, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RunnableDistribution):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
