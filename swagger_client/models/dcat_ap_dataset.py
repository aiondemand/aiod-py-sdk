# coding: utf-8

"""
    FastAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DcatAPDataset(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'object',
        'type': 'object',
        'dctdescription': 'object',
        'dcttitle': 'object',
        'dcatcontact_point': 'object',
        'dcatdistribution': 'object',
        'dcatkeyword': 'object',
        'dctpublisher': 'object',
        'dcatcreator': 'object',
        'foafpage': 'object',
        'dcatlanding_page': 'object',
        'dctissued': 'XSDDateTime',
        'dctmodified': 'XSDDateTime',
        'owlversion_info': 'object'
    }

    attribute_map = {
        'id': '@id',
        'type': '@type',
        'dctdescription': 'dct:description',
        'dcttitle': 'dct:title',
        'dcatcontact_point': 'dcat:contactPoint',
        'dcatdistribution': 'dcat:distribution',
        'dcatkeyword': 'dcat:keyword',
        'dctpublisher': 'dct:publisher',
        'dcatcreator': 'dcat:creator',
        'foafpage': 'foaf:page',
        'dcatlanding_page': 'dcat:landingPage',
        'dctissued': 'dct:issued',
        'dctmodified': 'dct:modified',
        'owlversion_info': 'owl:versionInfo'
    }

    def __init__(self, id=None, type=None, dctdescription=None, dcttitle=None, dcatcontact_point=None, dcatdistribution=None, dcatkeyword=None, dctpublisher=None, dcatcreator=None, foafpage=None, dcatlanding_page=None, dctissued=None, dctmodified=None, owlversion_info=None):  # noqa: E501
        """DcatAPDataset - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._type = None
        self._dctdescription = None
        self._dcttitle = None
        self._dcatcontact_point = None
        self._dcatdistribution = None
        self._dcatkeyword = None
        self._dctpublisher = None
        self._dcatcreator = None
        self._foafpage = None
        self._dcatlanding_page = None
        self._dctissued = None
        self._dctmodified = None
        self._owlversion_info = None
        self.discriminator = None
        self.id = id
        if type is not None:
            self.type = type
        self.dctdescription = dctdescription
        self.dcttitle = dcttitle
        if dcatcontact_point is not None:
            self.dcatcontact_point = dcatcontact_point
        if dcatdistribution is not None:
            self.dcatdistribution = dcatdistribution
        if dcatkeyword is not None:
            self.dcatkeyword = dcatkeyword
        if dctpublisher is not None:
            self.dctpublisher = dctpublisher
        if dcatcreator is not None:
            self.dcatcreator = dcatcreator
        if foafpage is not None:
            self.foafpage = foafpage
        if dcatlanding_page is not None:
            self.dcatlanding_page = dcatlanding_page
        if dctissued is not None:
            self.dctissued = dctissued
        if dctmodified is not None:
            self.dctmodified = dctmodified
        if owlversion_info is not None:
            self.owlversion_info = owlversion_info

    @property
    def id(self):
        """Gets the id of this DcatAPDataset.  # noqa: E501


        :return: The id of this DcatAPDataset.  # noqa: E501
        :rtype: object
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DcatAPDataset.


        :param id: The id of this DcatAPDataset.  # noqa: E501
        :type: object
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def type(self):
        """Gets the type of this DcatAPDataset.  # noqa: E501


        :return: The type of this DcatAPDataset.  # noqa: E501
        :rtype: object
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DcatAPDataset.


        :param type: The type of this DcatAPDataset.  # noqa: E501
        :type: object
        """

        self._type = type

    @property
    def dctdescription(self):
        """Gets the dctdescription of this DcatAPDataset.  # noqa: E501

        This property contains a free-text account of the Dataset  # noqa: E501

        :return: The dctdescription of this DcatAPDataset.  # noqa: E501
        :rtype: object
        """
        return self._dctdescription

    @dctdescription.setter
    def dctdescription(self, dctdescription):
        """Sets the dctdescription of this DcatAPDataset.

        This property contains a free-text account of the Dataset  # noqa: E501

        :param dctdescription: The dctdescription of this DcatAPDataset.  # noqa: E501
        :type: object
        """
        if dctdescription is None:
            raise ValueError("Invalid value for `dctdescription`, must not be `None`")  # noqa: E501

        self._dctdescription = dctdescription

    @property
    def dcttitle(self):
        """Gets the dcttitle of this DcatAPDataset.  # noqa: E501

        This property contains a name given to the Dataset  # noqa: E501

        :return: The dcttitle of this DcatAPDataset.  # noqa: E501
        :rtype: object
        """
        return self._dcttitle

    @dcttitle.setter
    def dcttitle(self, dcttitle):
        """Sets the dcttitle of this DcatAPDataset.

        This property contains a name given to the Dataset  # noqa: E501

        :param dcttitle: The dcttitle of this DcatAPDataset.  # noqa: E501
        :type: object
        """
        if dcttitle is None:
            raise ValueError("Invalid value for `dcttitle`, must not be `None`")  # noqa: E501

        self._dcttitle = dcttitle

    @property
    def dcatcontact_point(self):
        """Gets the dcatcontact_point of this DcatAPDataset.  # noqa: E501

        This property contains contact information that can be used for sending comments about the Dataset.  # noqa: E501

        :return: The dcatcontact_point of this DcatAPDataset.  # noqa: E501
        :rtype: object
        """
        return self._dcatcontact_point

    @dcatcontact_point.setter
    def dcatcontact_point(self, dcatcontact_point):
        """Sets the dcatcontact_point of this DcatAPDataset.

        This property contains contact information that can be used for sending comments about the Dataset.  # noqa: E501

        :param dcatcontact_point: The dcatcontact_point of this DcatAPDataset.  # noqa: E501
        :type: object
        """

        self._dcatcontact_point = dcatcontact_point

    @property
    def dcatdistribution(self):
        """Gets the dcatdistribution of this DcatAPDataset.  # noqa: E501


        :return: The dcatdistribution of this DcatAPDataset.  # noqa: E501
        :rtype: object
        """
        return self._dcatdistribution

    @dcatdistribution.setter
    def dcatdistribution(self, dcatdistribution):
        """Sets the dcatdistribution of this DcatAPDataset.


        :param dcatdistribution: The dcatdistribution of this DcatAPDataset.  # noqa: E501
        :type: object
        """

        self._dcatdistribution = dcatdistribution

    @property
    def dcatkeyword(self):
        """Gets the dcatkeyword of this DcatAPDataset.  # noqa: E501


        :return: The dcatkeyword of this DcatAPDataset.  # noqa: E501
        :rtype: object
        """
        return self._dcatkeyword

    @dcatkeyword.setter
    def dcatkeyword(self, dcatkeyword):
        """Sets the dcatkeyword of this DcatAPDataset.


        :param dcatkeyword: The dcatkeyword of this DcatAPDataset.  # noqa: E501
        :type: object
        """

        self._dcatkeyword = dcatkeyword

    @property
    def dctpublisher(self):
        """Gets the dctpublisher of this DcatAPDataset.  # noqa: E501

        This property refers to an entity (organisation) responsible for making the Dataset available.  # noqa: E501

        :return: The dctpublisher of this DcatAPDataset.  # noqa: E501
        :rtype: object
        """
        return self._dctpublisher

    @dctpublisher.setter
    def dctpublisher(self, dctpublisher):
        """Sets the dctpublisher of this DcatAPDataset.

        This property refers to an entity (organisation) responsible for making the Dataset available.  # noqa: E501

        :param dctpublisher: The dctpublisher of this DcatAPDataset.  # noqa: E501
        :type: object
        """

        self._dctpublisher = dctpublisher

    @property
    def dcatcreator(self):
        """Gets the dcatcreator of this DcatAPDataset.  # noqa: E501


        :return: The dcatcreator of this DcatAPDataset.  # noqa: E501
        :rtype: object
        """
        return self._dcatcreator

    @dcatcreator.setter
    def dcatcreator(self, dcatcreator):
        """Sets the dcatcreator of this DcatAPDataset.


        :param dcatcreator: The dcatcreator of this DcatAPDataset.  # noqa: E501
        :type: object
        """

        self._dcatcreator = dcatcreator

    @property
    def foafpage(self):
        """Gets the foafpage of this DcatAPDataset.  # noqa: E501


        :return: The foafpage of this DcatAPDataset.  # noqa: E501
        :rtype: object
        """
        return self._foafpage

    @foafpage.setter
    def foafpage(self, foafpage):
        """Sets the foafpage of this DcatAPDataset.


        :param foafpage: The foafpage of this DcatAPDataset.  # noqa: E501
        :type: object
        """

        self._foafpage = foafpage

    @property
    def dcatlanding_page(self):
        """Gets the dcatlanding_page of this DcatAPDataset.  # noqa: E501

        This property refers to a web page that provides access to the Dataset, its Distributions and/or additional information. It is intended to point to a landing page at the original data provider, not to a page on a site of a third party, such as an aggregator.  # noqa: E501

        :return: The dcatlanding_page of this DcatAPDataset.  # noqa: E501
        :rtype: object
        """
        return self._dcatlanding_page

    @dcatlanding_page.setter
    def dcatlanding_page(self, dcatlanding_page):
        """Sets the dcatlanding_page of this DcatAPDataset.

        This property refers to a web page that provides access to the Dataset, its Distributions and/or additional information. It is intended to point to a landing page at the original data provider, not to a page on a site of a third party, such as an aggregator.  # noqa: E501

        :param dcatlanding_page: The dcatlanding_page of this DcatAPDataset.  # noqa: E501
        :type: object
        """

        self._dcatlanding_page = dcatlanding_page

    @property
    def dctissued(self):
        """Gets the dctissued of this DcatAPDataset.  # noqa: E501


        :return: The dctissued of this DcatAPDataset.  # noqa: E501
        :rtype: XSDDateTime
        """
        return self._dctissued

    @dctissued.setter
    def dctissued(self, dctissued):
        """Sets the dctissued of this DcatAPDataset.


        :param dctissued: The dctissued of this DcatAPDataset.  # noqa: E501
        :type: XSDDateTime
        """

        self._dctissued = dctissued

    @property
    def dctmodified(self):
        """Gets the dctmodified of this DcatAPDataset.  # noqa: E501


        :return: The dctmodified of this DcatAPDataset.  # noqa: E501
        :rtype: XSDDateTime
        """
        return self._dctmodified

    @dctmodified.setter
    def dctmodified(self, dctmodified):
        """Sets the dctmodified of this DcatAPDataset.


        :param dctmodified: The dctmodified of this DcatAPDataset.  # noqa: E501
        :type: XSDDateTime
        """

        self._dctmodified = dctmodified

    @property
    def owlversion_info(self):
        """Gets the owlversion_info of this DcatAPDataset.  # noqa: E501


        :return: The owlversion_info of this DcatAPDataset.  # noqa: E501
        :rtype: object
        """
        return self._owlversion_info

    @owlversion_info.setter
    def owlversion_info(self, owlversion_info):
        """Sets the owlversion_info of this DcatAPDataset.


        :param owlversion_info: The owlversion_info of this DcatAPDataset.  # noqa: E501
        :type: object
        """

        self._owlversion_info = owlversion_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DcatAPDataset, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DcatAPDataset):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
