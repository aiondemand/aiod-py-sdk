# coding: utf-8

"""
    FastAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SchemaDotOrgDataDownload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'object',
        'name': 'object',
        'content_url': 'object',
        'content_size': 'object',
        'encoding_format': 'object'
    }

    attribute_map = {
        'type': '@type',
        'name': 'name',
        'content_url': 'contentUrl',
        'content_size': 'contentSize',
        'encoding_format': 'encodingFormat'
    }

    def __init__(self, type=None, name=None, content_url=None, content_size=None, encoding_format=None):  # noqa: E501
        """SchemaDotOrgDataDownload - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._name = None
        self._content_url = None
        self._content_size = None
        self._encoding_format = None
        self.discriminator = None
        if type is not None:
            self.type = type
        if name is not None:
            self.name = name
        self.content_url = content_url
        if content_size is not None:
            self.content_size = content_size
        if encoding_format is not None:
            self.encoding_format = encoding_format

    @property
    def type(self):
        """Gets the type of this SchemaDotOrgDataDownload.  # noqa: E501


        :return: The type of this SchemaDotOrgDataDownload.  # noqa: E501
        :rtype: object
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SchemaDotOrgDataDownload.


        :param type: The type of this SchemaDotOrgDataDownload.  # noqa: E501
        :type: object
        """

        self._type = type

    @property
    def name(self):
        """Gets the name of this SchemaDotOrgDataDownload.  # noqa: E501

        The name of the item.  # noqa: E501

        :return: The name of this SchemaDotOrgDataDownload.  # noqa: E501
        :rtype: object
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SchemaDotOrgDataDownload.

        The name of the item.  # noqa: E501

        :param name: The name of this SchemaDotOrgDataDownload.  # noqa: E501
        :type: object
        """

        self._name = name

    @property
    def content_url(self):
        """Gets the content_url of this SchemaDotOrgDataDownload.  # noqa: E501

        Actual bytes of the media object, for example the image file or video file.  # noqa: E501

        :return: The content_url of this SchemaDotOrgDataDownload.  # noqa: E501
        :rtype: object
        """
        return self._content_url

    @content_url.setter
    def content_url(self, content_url):
        """Sets the content_url of this SchemaDotOrgDataDownload.

        Actual bytes of the media object, for example the image file or video file.  # noqa: E501

        :param content_url: The content_url of this SchemaDotOrgDataDownload.  # noqa: E501
        :type: object
        """
        if content_url is None:
            raise ValueError("Invalid value for `content_url`, must not be `None`")  # noqa: E501

        self._content_url = content_url

    @property
    def content_size(self):
        """Gets the content_size of this SchemaDotOrgDataDownload.  # noqa: E501

        File size in (mega/kilo) bytes.  # noqa: E501

        :return: The content_size of this SchemaDotOrgDataDownload.  # noqa: E501
        :rtype: object
        """
        return self._content_size

    @content_size.setter
    def content_size(self, content_size):
        """Sets the content_size of this SchemaDotOrgDataDownload.

        File size in (mega/kilo) bytes.  # noqa: E501

        :param content_size: The content_size of this SchemaDotOrgDataDownload.  # noqa: E501
        :type: object
        """

        self._content_size = content_size

    @property
    def encoding_format(self):
        """Gets the encoding_format of this SchemaDotOrgDataDownload.  # noqa: E501

        Media type typically expressed using a MIME format (see [IANA site](http://www.iana.org/assignments/media-types/media-types.xhtml) and [MDN reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types))e.g. application/zip for a SoftwareApplication binary, audio/mpeg for .mp3 etc.).In cases where a [[CreativeWork]] has several media type representations, [[encoding]]can be used to indicate each [[MediaObject]] alongside particular [[encodingFormat]]information. Unregistered or niche encoding and file formats can be indicated insteadvia the most appropriate URL, e.g. defining Web page or a Wikipedia/Wikidata entry.  # noqa: E501

        :return: The encoding_format of this SchemaDotOrgDataDownload.  # noqa: E501
        :rtype: object
        """
        return self._encoding_format

    @encoding_format.setter
    def encoding_format(self, encoding_format):
        """Sets the encoding_format of this SchemaDotOrgDataDownload.

        Media type typically expressed using a MIME format (see [IANA site](http://www.iana.org/assignments/media-types/media-types.xhtml) and [MDN reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types))e.g. application/zip for a SoftwareApplication binary, audio/mpeg for .mp3 etc.).In cases where a [[CreativeWork]] has several media type representations, [[encoding]]can be used to indicate each [[MediaObject]] alongside particular [[encodingFormat]]information. Unregistered or niche encoding and file formats can be indicated insteadvia the most appropriate URL, e.g. defining Web page or a Wikipedia/Wikidata entry.  # noqa: E501

        :param encoding_format: The encoding_format of this SchemaDotOrgDataDownload.  # noqa: E501
        :type: object
        """

        self._encoding_format = encoding_format

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SchemaDotOrgDataDownload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SchemaDotOrgDataDownload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
