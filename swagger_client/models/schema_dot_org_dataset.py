# coding: utf-8

"""
    FastAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SchemaDotOrgDataset(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'context': 'object',
        'type': 'object',
        'name': 'object',
        'description': 'object',
        'identifier': 'object',
        'alternate_name': 'object',
        'citation': 'object',
        'creator': 'object',
        'date_modified': 'object',
        'date_published': 'object',
        'is_accessible_for_free': 'object',
        'keywords': 'object',
        'same_as': 'object',
        'version': 'object',
        'url': 'object',
        'distribution': 'object',
        'funder': 'object',
        'issn': 'object',
        'license': 'object',
        'measurement_technique': 'object',
        'size': 'object',
        'temporal_coverage': 'object'
    }

    attribute_map = {
        'context': '@context',
        'type': '@type',
        'name': 'name',
        'description': 'description',
        'identifier': 'identifier',
        'alternate_name': 'alternateName',
        'citation': 'citation',
        'creator': 'creator',
        'date_modified': 'dateModified',
        'date_published': 'datePublished',
        'is_accessible_for_free': 'isAccessibleForFree',
        'keywords': 'keywords',
        'same_as': 'sameAs',
        'version': 'version',
        'url': 'url',
        'distribution': 'distribution',
        'funder': 'funder',
        'issn': 'issn',
        'license': 'license',
        'measurement_technique': 'measurementTechnique',
        'size': 'size',
        'temporal_coverage': 'temporalCoverage'
    }

    def __init__(self, context=None, type=None, name=None, description=None, identifier=None, alternate_name=None, citation=None, creator=None, date_modified=None, date_published=None, is_accessible_for_free=None, keywords=None, same_as=None, version=None, url=None, distribution=None, funder=None, issn=None, license=None, measurement_technique=None, size=None, temporal_coverage=None):  # noqa: E501
        """SchemaDotOrgDataset - a model defined in Swagger"""  # noqa: E501
        self._context = None
        self._type = None
        self._name = None
        self._description = None
        self._identifier = None
        self._alternate_name = None
        self._citation = None
        self._creator = None
        self._date_modified = None
        self._date_published = None
        self._is_accessible_for_free = None
        self._keywords = None
        self._same_as = None
        self._version = None
        self._url = None
        self._distribution = None
        self._funder = None
        self._issn = None
        self._license = None
        self._measurement_technique = None
        self._size = None
        self._temporal_coverage = None
        self.discriminator = None
        if context is not None:
            self.context = context
        if type is not None:
            self.type = type
        self.name = name
        if description is not None:
            self.description = description
        self.identifier = identifier
        if alternate_name is not None:
            self.alternate_name = alternate_name
        if citation is not None:
            self.citation = citation
        if creator is not None:
            self.creator = creator
        if date_modified is not None:
            self.date_modified = date_modified
        if date_published is not None:
            self.date_published = date_published
        if is_accessible_for_free is not None:
            self.is_accessible_for_free = is_accessible_for_free
        if keywords is not None:
            self.keywords = keywords
        if same_as is not None:
            self.same_as = same_as
        if version is not None:
            self.version = version
        if url is not None:
            self.url = url
        if distribution is not None:
            self.distribution = distribution
        if funder is not None:
            self.funder = funder
        if issn is not None:
            self.issn = issn
        if license is not None:
            self.license = license
        if measurement_technique is not None:
            self.measurement_technique = measurement_technique
        if size is not None:
            self.size = size
        if temporal_coverage is not None:
            self.temporal_coverage = temporal_coverage

    @property
    def context(self):
        """Gets the context of this SchemaDotOrgDataset.  # noqa: E501


        :return: The context of this SchemaDotOrgDataset.  # noqa: E501
        :rtype: object
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this SchemaDotOrgDataset.


        :param context: The context of this SchemaDotOrgDataset.  # noqa: E501
        :type: object
        """

        self._context = context

    @property
    def type(self):
        """Gets the type of this SchemaDotOrgDataset.  # noqa: E501


        :return: The type of this SchemaDotOrgDataset.  # noqa: E501
        :rtype: object
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SchemaDotOrgDataset.


        :param type: The type of this SchemaDotOrgDataset.  # noqa: E501
        :type: object
        """

        self._type = type

    @property
    def name(self):
        """Gets the name of this SchemaDotOrgDataset.  # noqa: E501

        The name of the item.  # noqa: E501

        :return: The name of this SchemaDotOrgDataset.  # noqa: E501
        :rtype: object
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SchemaDotOrgDataset.

        The name of the item.  # noqa: E501

        :param name: The name of this SchemaDotOrgDataset.  # noqa: E501
        :type: object
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this SchemaDotOrgDataset.  # noqa: E501

        A description of the item.  # noqa: E501

        :return: The description of this SchemaDotOrgDataset.  # noqa: E501
        :rtype: object
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SchemaDotOrgDataset.

        A description of the item.  # noqa: E501

        :param description: The description of this SchemaDotOrgDataset.  # noqa: E501
        :type: object
        """

        self._description = description

    @property
    def identifier(self):
        """Gets the identifier of this SchemaDotOrgDataset.  # noqa: E501

        The AIoD identifier  # noqa: E501

        :return: The identifier of this SchemaDotOrgDataset.  # noqa: E501
        :rtype: object
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this SchemaDotOrgDataset.

        The AIoD identifier  # noqa: E501

        :param identifier: The identifier of this SchemaDotOrgDataset.  # noqa: E501
        :type: object
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")  # noqa: E501

        self._identifier = identifier

    @property
    def alternate_name(self):
        """Gets the alternate_name of this SchemaDotOrgDataset.  # noqa: E501

        An alias for the item.  # noqa: E501

        :return: The alternate_name of this SchemaDotOrgDataset.  # noqa: E501
        :rtype: object
        """
        return self._alternate_name

    @alternate_name.setter
    def alternate_name(self, alternate_name):
        """Sets the alternate_name of this SchemaDotOrgDataset.

        An alias for the item.  # noqa: E501

        :param alternate_name: The alternate_name of this SchemaDotOrgDataset.  # noqa: E501
        :type: object
        """

        self._alternate_name = alternate_name

    @property
    def citation(self):
        """Gets the citation of this SchemaDotOrgDataset.  # noqa: E501

        A reference to another creative work, such as another publication, web page,scholarly article, etc.  # noqa: E501

        :return: The citation of this SchemaDotOrgDataset.  # noqa: E501
        :rtype: object
        """
        return self._citation

    @citation.setter
    def citation(self, citation):
        """Sets the citation of this SchemaDotOrgDataset.

        A reference to another creative work, such as another publication, web page,scholarly article, etc.  # noqa: E501

        :param citation: The citation of this SchemaDotOrgDataset.  # noqa: E501
        :type: object
        """

        self._citation = citation

    @property
    def creator(self):
        """Gets the creator of this SchemaDotOrgDataset.  # noqa: E501

        The creator/author of this CreativeWork. This is the same as the Author property for CreativeWork.  # noqa: E501

        :return: The creator of this SchemaDotOrgDataset.  # noqa: E501
        :rtype: object
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this SchemaDotOrgDataset.

        The creator/author of this CreativeWork. This is the same as the Author property for CreativeWork.  # noqa: E501

        :param creator: The creator of this SchemaDotOrgDataset.  # noqa: E501
        :type: object
        """

        self._creator = creator

    @property
    def date_modified(self):
        """Gets the date_modified of this SchemaDotOrgDataset.  # noqa: E501

        The date on which the CreativeWork was most recently modified or when the item's entry was modified within a DataFeed.  # noqa: E501

        :return: The date_modified of this SchemaDotOrgDataset.  # noqa: E501
        :rtype: object
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this SchemaDotOrgDataset.

        The date on which the CreativeWork was most recently modified or when the item's entry was modified within a DataFeed.  # noqa: E501

        :param date_modified: The date_modified of this SchemaDotOrgDataset.  # noqa: E501
        :type: object
        """

        self._date_modified = date_modified

    @property
    def date_published(self):
        """Gets the date_published of this SchemaDotOrgDataset.  # noqa: E501

        Date of first broadcast/publication.  # noqa: E501

        :return: The date_published of this SchemaDotOrgDataset.  # noqa: E501
        :rtype: object
        """
        return self._date_published

    @date_published.setter
    def date_published(self, date_published):
        """Sets the date_published of this SchemaDotOrgDataset.

        Date of first broadcast/publication.  # noqa: E501

        :param date_published: The date_published of this SchemaDotOrgDataset.  # noqa: E501
        :type: object
        """

        self._date_published = date_published

    @property
    def is_accessible_for_free(self):
        """Gets the is_accessible_for_free of this SchemaDotOrgDataset.  # noqa: E501

        A flag to signal that the item, event, or place is accessible for free.  # noqa: E501

        :return: The is_accessible_for_free of this SchemaDotOrgDataset.  # noqa: E501
        :rtype: object
        """
        return self._is_accessible_for_free

    @is_accessible_for_free.setter
    def is_accessible_for_free(self, is_accessible_for_free):
        """Sets the is_accessible_for_free of this SchemaDotOrgDataset.

        A flag to signal that the item, event, or place is accessible for free.  # noqa: E501

        :param is_accessible_for_free: The is_accessible_for_free of this SchemaDotOrgDataset.  # noqa: E501
        :type: object
        """

        self._is_accessible_for_free = is_accessible_for_free

    @property
    def keywords(self):
        """Gets the keywords of this SchemaDotOrgDataset.  # noqa: E501

        Keywords or tags used to describe this content. Multiple entries in a keywords list are typically delimited by commas.  # noqa: E501

        :return: The keywords of this SchemaDotOrgDataset.  # noqa: E501
        :rtype: object
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this SchemaDotOrgDataset.

        Keywords or tags used to describe this content. Multiple entries in a keywords list are typically delimited by commas.  # noqa: E501

        :param keywords: The keywords of this SchemaDotOrgDataset.  # noqa: E501
        :type: object
        """

        self._keywords = keywords

    @property
    def same_as(self):
        """Gets the same_as of this SchemaDotOrgDataset.  # noqa: E501

        URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Wikidata entry, or official website.  # noqa: E501

        :return: The same_as of this SchemaDotOrgDataset.  # noqa: E501
        :rtype: object
        """
        return self._same_as

    @same_as.setter
    def same_as(self, same_as):
        """Sets the same_as of this SchemaDotOrgDataset.

        URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Wikidata entry, or official website.  # noqa: E501

        :param same_as: The same_as of this SchemaDotOrgDataset.  # noqa: E501
        :type: object
        """

        self._same_as = same_as

    @property
    def version(self):
        """Gets the version of this SchemaDotOrgDataset.  # noqa: E501

        The version of the CreativeWork embodied by a specified resource.  # noqa: E501

        :return: The version of this SchemaDotOrgDataset.  # noqa: E501
        :rtype: object
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SchemaDotOrgDataset.

        The version of the CreativeWork embodied by a specified resource.  # noqa: E501

        :param version: The version of this SchemaDotOrgDataset.  # noqa: E501
        :type: object
        """

        self._version = version

    @property
    def url(self):
        """Gets the url of this SchemaDotOrgDataset.  # noqa: E501

        URL of the item.  # noqa: E501

        :return: The url of this SchemaDotOrgDataset.  # noqa: E501
        :rtype: object
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this SchemaDotOrgDataset.

        URL of the item.  # noqa: E501

        :param url: The url of this SchemaDotOrgDataset.  # noqa: E501
        :type: object
        """

        self._url = url

    @property
    def distribution(self):
        """Gets the distribution of this SchemaDotOrgDataset.  # noqa: E501

        A downloadable form of this dataset, at a specific location, in a specific format.  # noqa: E501

        :return: The distribution of this SchemaDotOrgDataset.  # noqa: E501
        :rtype: object
        """
        return self._distribution

    @distribution.setter
    def distribution(self, distribution):
        """Sets the distribution of this SchemaDotOrgDataset.

        A downloadable form of this dataset, at a specific location, in a specific format.  # noqa: E501

        :param distribution: The distribution of this SchemaDotOrgDataset.  # noqa: E501
        :type: object
        """

        self._distribution = distribution

    @property
    def funder(self):
        """Gets the funder of this SchemaDotOrgDataset.  # noqa: E501

        A person or organization that supports (sponsors) something through some kind of financialcontribution.  # noqa: E501

        :return: The funder of this SchemaDotOrgDataset.  # noqa: E501
        :rtype: object
        """
        return self._funder

    @funder.setter
    def funder(self, funder):
        """Sets the funder of this SchemaDotOrgDataset.

        A person or organization that supports (sponsors) something through some kind of financialcontribution.  # noqa: E501

        :param funder: The funder of this SchemaDotOrgDataset.  # noqa: E501
        :type: object
        """

        self._funder = funder

    @property
    def issn(self):
        """Gets the issn of this SchemaDotOrgDataset.  # noqa: E501

        The International Standard Serial Number (ISSN) that identifies this serial publication. You can repeat this property to identify different formats of, or the linking ISSN (ISSN-L) for, this serial publication.  # noqa: E501

        :return: The issn of this SchemaDotOrgDataset.  # noqa: E501
        :rtype: object
        """
        return self._issn

    @issn.setter
    def issn(self, issn):
        """Sets the issn of this SchemaDotOrgDataset.

        The International Standard Serial Number (ISSN) that identifies this serial publication. You can repeat this property to identify different formats of, or the linking ISSN (ISSN-L) for, this serial publication.  # noqa: E501

        :param issn: The issn of this SchemaDotOrgDataset.  # noqa: E501
        :type: object
        """

        self._issn = issn

    @property
    def license(self):
        """Gets the license of this SchemaDotOrgDataset.  # noqa: E501

        A license document that applies to this content, typically indicated by URL.  # noqa: E501

        :return: The license of this SchemaDotOrgDataset.  # noqa: E501
        :rtype: object
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this SchemaDotOrgDataset.

        A license document that applies to this content, typically indicated by URL.  # noqa: E501

        :param license: The license of this SchemaDotOrgDataset.  # noqa: E501
        :type: object
        """

        self._license = license

    @property
    def measurement_technique(self):
        """Gets the measurement_technique of this SchemaDotOrgDataset.  # noqa: E501

        A technique or technology used in a [[Dataset]] (or [[DataDownload]], [[DataCatalog]]), corresponding to the method used for measuring the corresponding variable(s) (described using [[variableMeasured]]). This is oriented towards scientific and scholarly dataset publication but may have broader applicability; it is not intended as a full representation of measurement, but rather as a high level summary for dataset discovery. For example, if [[variableMeasured]] is: molecule concentration, [[measurementTechnique]] could be: \"mass spectrometry\" or \"nmr spectroscopy\" or \"colorimetry\" or \"immunofluorescence\". If the [[variableMeasured]] is \"depression rating\", the [[measurementTechnique]] could be \"Zung Scale\" or \"HAM-D\" or \"Beck Depression Inventory\". If there are several [[variableMeasured]] properties recorded for some given data object, use a [[PropertyValue]] for each [[variableMeasured]] and attach the corresponding [[measurementTechnique]].  # noqa: E501

        :return: The measurement_technique of this SchemaDotOrgDataset.  # noqa: E501
        :rtype: object
        """
        return self._measurement_technique

    @measurement_technique.setter
    def measurement_technique(self, measurement_technique):
        """Sets the measurement_technique of this SchemaDotOrgDataset.

        A technique or technology used in a [[Dataset]] (or [[DataDownload]], [[DataCatalog]]), corresponding to the method used for measuring the corresponding variable(s) (described using [[variableMeasured]]). This is oriented towards scientific and scholarly dataset publication but may have broader applicability; it is not intended as a full representation of measurement, but rather as a high level summary for dataset discovery. For example, if [[variableMeasured]] is: molecule concentration, [[measurementTechnique]] could be: \"mass spectrometry\" or \"nmr spectroscopy\" or \"colorimetry\" or \"immunofluorescence\". If the [[variableMeasured]] is \"depression rating\", the [[measurementTechnique]] could be \"Zung Scale\" or \"HAM-D\" or \"Beck Depression Inventory\". If there are several [[variableMeasured]] properties recorded for some given data object, use a [[PropertyValue]] for each [[variableMeasured]] and attach the corresponding [[measurementTechnique]].  # noqa: E501

        :param measurement_technique: The measurement_technique of this SchemaDotOrgDataset.  # noqa: E501
        :type: object
        """

        self._measurement_technique = measurement_technique

    @property
    def size(self):
        """Gets the size of this SchemaDotOrgDataset.  # noqa: E501

        A standardized size of a product or creative work, specified either through a simple textual string (for example 'XL', '32Wx34L'), a QuantitativeValue with a unitCode,  # noqa: E501

        :return: The size of this SchemaDotOrgDataset.  # noqa: E501
        :rtype: object
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this SchemaDotOrgDataset.

        A standardized size of a product or creative work, specified either through a simple textual string (for example 'XL', '32Wx34L'), a QuantitativeValue with a unitCode,  # noqa: E501

        :param size: The size of this SchemaDotOrgDataset.  # noqa: E501
        :type: object
        """

        self._size = size

    @property
    def temporal_coverage(self):
        """Gets the temporal_coverage of this SchemaDotOrgDataset.  # noqa: E501

        The temporalCoverage of a CreativeWork indicates the period that the content applies to, i.e. that it describes, either as a DateTime or as a textual string indicating a time period in [ISO 8601 time interval format](https://en.wikipedia.org/wiki/ISO_8601#Time_intervals).In the case of a Dataset it will typically indicate the relevant time period in a precise notation (e.g. for a 2011 census dataset, the year 2011 would be written \"2011/2012\"). Other forms of content e.g. ScholarlyArticle, Book, TVSeries or TVEpisode may indicate their temporalCoverage in broader terms - textually or via well-known URL. Written works such as books may sometimes have precise temporal coverage too, e.g. a work set in 1939 - 1945 can be indicated in ISO 8601 interval format format via \"1939/1945\". Open-ended date ranges can be written with \"..\" in place of the end date. For example, \"2015-11/..\" indicates a range beginning in November 2015 and with no specified final date. This is tentative and might be updated in future when ISO 8601 is officially updated.  # noqa: E501

        :return: The temporal_coverage of this SchemaDotOrgDataset.  # noqa: E501
        :rtype: object
        """
        return self._temporal_coverage

    @temporal_coverage.setter
    def temporal_coverage(self, temporal_coverage):
        """Sets the temporal_coverage of this SchemaDotOrgDataset.

        The temporalCoverage of a CreativeWork indicates the period that the content applies to, i.e. that it describes, either as a DateTime or as a textual string indicating a time period in [ISO 8601 time interval format](https://en.wikipedia.org/wiki/ISO_8601#Time_intervals).In the case of a Dataset it will typically indicate the relevant time period in a precise notation (e.g. for a 2011 census dataset, the year 2011 would be written \"2011/2012\"). Other forms of content e.g. ScholarlyArticle, Book, TVSeries or TVEpisode may indicate their temporalCoverage in broader terms - textually or via well-known URL. Written works such as books may sometimes have precise temporal coverage too, e.g. a work set in 1939 - 1945 can be indicated in ISO 8601 interval format format via \"1939/1945\". Open-ended date ranges can be written with \"..\" in place of the end date. For example, \"2015-11/..\" indicates a range beginning in November 2015 and with no specified final date. This is tentative and might be updated in future when ISO 8601 is officially updated.  # noqa: E501

        :param temporal_coverage: The temporal_coverage of this SchemaDotOrgDataset.  # noqa: E501
        :type: object
        """

        self._temporal_coverage = temporal_coverage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SchemaDotOrgDataset, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SchemaDotOrgDataset):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
