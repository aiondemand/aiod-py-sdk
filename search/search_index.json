{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#ai-on-demand","title":"AI-on-Demand","text":"<p>The AI-on-Demand (AIOD) platform empowers AI research and innovation for industry and academia.  At its core if the metadata catalogue which indexes countless AI resources, such as datasets, papers, and educational material,  from many different platforms such as Zenodo, OpenML, and AIDA. This package allows you to explore all resources in the metadata catalogue through Python. You can also browse the contents of the AI-on-Demand metadata catalogue through the MyLibrary service.</p>"},{"location":"#installation","title":"Installation","text":"<p>The <code>aiondemand</code> package is on PyPI:</p> <pre><code>$ pip install aiondemand\n</code></pre> <p>Tip: install your dependencies in a virtual environment.</p>"},{"location":"#usage","title":"Usage","text":"<p>You can directly access endpoints through the Python API, for example to browse datasets: <pre><code>import aiod\n\naiod.datasets.get_list()\n</code></pre> And results will be returned as a Pandas dataframe (though the <code>data_format</code> may be used to get JSON instead): <pre><code>      platform platform_resource_identifier                    name       date_published                                            same_as  is_accessible_for_free  ...  relevant_link  relevant_resource relevant_to research_area scientific_domain identifier\n0  huggingface       acronym_identification  acronym_identification  2022-03-02T23:29:22  https://huggingface.co/datasets/acronym_identi...                    True  ...             []                 []          []            []                []          1\n...\n9  huggingface              allegro_reviews         allegro_reviews  2022-03-02T23:29:22    https://huggingface.co/datasets/allegro_reviews                    True  ...             []                 []          []            []                []         10\n\n[10 rows x 30 columns]\n</code></pre></p> <p>You can even query the elastic search endpoints: <pre><code>aiod.publications.search(search_query=\"Robotics\")\n</code></pre> <pre><code>      platform platform_resource_identifier                                               name date_published                                            same_as is_accessible_for_free  ... relevant_resource relevant_to      research_area  scientific_domain  type  identifier\n0  robotics4eu                         1803  Responsible Robotics &amp;amp; non-tech barriers t...           None  https://www.robotics4eu.eu/publications/respon...                   None  ...                []          []  [other materials]  [other materials]  None           4\n\n[1 rows x 36 columns]\n</code></pre></p>"},{"location":"#contributing","title":"Contributing","text":"<p>Interested in contributing? Check out the contributing guidelines. By contributing to this project, you agree to abide by our Code of Conduct.</p>"},{"location":"#credits","title":"Credits","text":"<p>The <code>aiondemand</code> package is being developed with funding from EU\u2019s Horizon Europe research and innovation program under grant agreement No. 101070000 (AI4EUROPE). Not all contributors need be affiliated with this funding.</p> <p><code>cookiecutter</code> and the <code>py-pkgs-cookiecutter</code> template were used to create the repository structure.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v010-06122023","title":"v0.1.0 (06/12/2023)","text":"<ul> <li>First release of <code>aiondemand</code>!</li> </ul>"},{"location":"conduct/","title":"Code of Conduct","text":""},{"location":"conduct/#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behavior by participants include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or electronic address, without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a professional setting</li> </ul>"},{"location":"conduct/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.</p>"},{"location":"conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.</p> <p>Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.</p>"},{"location":"conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant homepage, version 1.4.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Before reporting a bug, please check our issue tracker that the bug has not yet been reported. If it has, you may add any additional information that might be  missing to that issue. If you have nothing to add, react with a \ud83d\udc4d to the original report to communicate you are also experiencing the issue.</p> <p>In case the bug has not been reported yet, please follow these steps to ensure that we can investigate the issue and resolve it efficiently:</p> <ul> <li>Describe the bug. What is the expected behavior, and what is the observed behavior?</li> <li>As much as possible, provide steps to reproduce the bug. Preferably with a minimal, reproducible example.</li> <li>Share your operating system name and version, Python and <code>aiondemand</code> version. The following    code snippet can be used to automatically obtain the information:   <pre><code>import aiod\nimport platform\nprint(f\"{platform.platform()=}\")\nprint(f\"{aiod.__version__=}\")\nprint(f\"{platform.python_version()=}\")\n</code></pre>   or, in one command;    <pre><code>python -c 'import aiod; import platform; print(f\"{platform.platform()=}\"); print(f\"{aiod.__version__=}\"); print(f\"{platform.python_version()=}\")'\n</code></pre></li> <li>If you have any additional details about your local setup that might be helpful in troubleshooting, please share them.</li> </ul>"},{"location":"contributing/#fixing-bugs-and-adding-features","title":"Fixing bugs and adding features","text":"<p>Our issue tracker has a list of known bugs (labelled <code>bug</code>) and proposed features (labelled <code>enhancement</code>). Of particular interest may be those issues labelled <code>help wanted</code>, as those are best suited for outside contributors. </p> <p>Before working on an open issue, please first indicate your interest in fixing it by posting a comment on the issue. That way, we can assign people (you) to the issue, and avoid multiple people working on fixing the same bug in parallel (and thus avoid double work).</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>You can never have enough documentation! Please feel free to contribute to any part of the documentation, such as the official docs, docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>If you are proposing a feature, please explain in detail how it would work.  Answer at least the following questions:</p> <ul> <li>What is the goal of the new feature? Which problem does it solve, or what functionality does it add?</li> <li>Does the feature change an existing interface, or add a new one? What does the suggested new interface look like?</li> <li>Give an example of a use case where the feature would be of added benefit.</li> <li>How does the change affect other existing functionality? Will it be a breaking change?</li> </ul> <p>When suggesting a new feature, try to keep the scope as narrow as possible. This keeps the discussion focused, and makes it easier to get to an agreement and subsequently implement it. Even if a feature request is accepted, it is not a guarantee that we have time available to implement it ourselves. However, it makes it much easier for any contributor to start implementing the feature. Contributions welcome :)</p>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up <code>aiondemand</code> for local development.</p>"},{"location":"contributing/#setting-up-the-development-environment","title":"Setting up the Development Environment","text":"<ol> <li>Fork the repository from GitHub by clicking the <code>fork</code> button on the webpage.</li> <li>Clone the fork: <code>git clone https://github.com/USERNAME/aiondemand.git</code>. Remember to substitute your username.</li> <li>Install the project locally (after moving to the new directory).  Similar to a regular installation, we strongly recommend you to make use of a virtual environment. After activating the environment, install the package in editable mode and with the additional develop packages: <code>python -m pip install -e \".[dev]\"</code></li> </ol> <p>Before making any changes, first check your setup works: <pre><code>python -m pytest tests\n</code></pre> All tests should pass.</p>"},{"location":"contributing/#making-changes","title":"Making Changes","text":"<p>While working on a feature, you can work from the \"develop\"-branch, provided you are working on a fork. However, even if you are working on a fork we strongly recommend you to make changes on a new branch. When working on the main repository, this is required. When working on a fork, this makes it easier to  keep your fork in sync with the upstream repository (this one). Your new branch should branch off \"develop\":</p> <pre><code>git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>When you're done making changes, check that your changes conform to any code formatting requirements and pass any tests. Also add new tests. When fixing a bug, add a regression test that exposes the bug (i.e., it should fail without your changes, and pass with them) and add a reference to the GitHub issue number as a comment. When adding a feature, add new tests to cover the new code.</p> <p>Finally, you can open a pull request with the proposed changes. A core contributor will have a look at the changes, and possibly request some changes. After all concerns have been addressed, the contributor will merge the change and it will be included in the next release.</p>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include additional tests if appropriate.</li> <li>If the pull request adds functionality, the docs should be updated.</li> <li>The pull request should work for all currently supported operating systems and versions of Python.</li> </ol>"},{"location":"contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>Please note that the <code>aiondemand</code> project is released with a Code of Conduct.  By contributing to this project you agree to abide by its terms.</p>"},{"location":"example/","title":"Example usage","text":"In\u00a0[1]: Copied! <pre>import aiod\n</pre> import aiod In\u00a0[2]: Copied! <pre>aiod.config.api_base_url = \"http://localhost/\"\naiod.config.auth_server_url = \"http://localhost/aiod-auth/\"\n</pre>  aiod.config.api_base_url = \"http://localhost/\" aiod.config.auth_server_url = \"http://localhost/aiod-auth/\" In\u00a0[3]: Copied! <pre>aiod_counts = aiod.counts()\naiod_counts[[\"datasets\", \"ml_models\"]]\n</pre> aiod_counts = aiod.counts() aiod_counts[[\"datasets\", \"ml_models\"]] Out[3]: datasets ml_models bonseyes NaN 12.0 example NaN 1.0 huggingface 122252.0 1.0 openml 5569.0 15767.0 stairwai 1.0 NaN zenodo 305140.0 NaN aida_cms NaN NaN aiod NaN NaN robotics4eu NaN NaN In\u00a0[3]: Copied! <pre>help(aiod.datasets)\n</pre> help(aiod.datasets) <pre>Help on module aiod_sdk.resources.datasets in aiod_sdk.resources:\n\nNAME\n    aiod_sdk.resources.datasets\n\nDATA\n    counts = functools.partial(&lt;function counts at 0x1062d54e0&gt;, asset_typ...\n        Retrieve the number of datasets assets in the metadata catalogue.\n        \n        Parameters (keywords required):\n            version (str | None): The version of the endpoint (default is None).\n            per_platform (bool): Whether to list counts per platform (default is False).\n        \n        Returns:\n            int | dict[str, int]: The number datasets assets in the metadata catalogue.\n                If the parameter per_platform is True, it returns a dict[str, int].\n    \n    get_asset = functools.partial(&lt;function get_asset at 0x1185527a0&gt;, ass...\n        Retrieve metadata for a specific datasets.\n        \n        Parameters (keywords required):\n            identifier (int): The identifier of the datasets to retrieve.\n            version (str | None): The version of the endpoint (default is None).\n            data_format (Literal[\"pandas\", \"json\"]): The desired format for the response (default is \"pandas\").\n                For \"json\" formats, the returned type is a json decoded type, in this case a dict.\n        \n        Returns:\n            pd.Series | dict: The retrieved metadata for the specified datasets.\n    \n    get_assets_async = functools.partial(&lt;function get_assets_async at 0x1...\n        Asynchronously retrieve metadata for a list of datasets identifiers.\n        \n        Parameters (keywords required):\n            identifiers (list[int]): The list of identifiers of the datasets to retrieve.\n            version (str | None): The version of the endpoint (default is None).\n            data_format (Literal[\"pandas\", \"json\"]): The desired format for the response (default is \"pandas\").\n                For \"json\" formats, the returned type is a json decoded type, in this case a list of dict's.\n        \n        Returns:\n            pd.DataFrame | list[dict]: The retrieved metadata for the specified datasets.\n    \n    get_list = functools.partial(&lt;function get_list at 0x1060365c0&gt;, asset...\n        Retrieve a list of datasets from the catalogue.\n        \n        Parameters (keywords required):\n            offset (int): The offset for pagination (default is 0).\n            limit (int): The maximum number of items to retrieve (default is 10).\n            version (str | None): The version of the endpoint (default is None).\n            data_format (Literal[\"pandas\", \"json\"]): The desired format for the response (default is \"pandas\").\n                For \"json\" formats, the returned type is a json decoded type, i.e. in this case a list of dict's.\n        \n        Returns:\n            pd.DataFrame | list[dict]: The retrieved metadata in the specified format.\n    \n    get_list_async = functools.partial(&lt;function get_list_async at 0x11855...\n        Asynchronously retrieve a list of datasets from the catalogue in batches.\n        \n        Parameters (keywords required):\n            offset (int): The offset for pagination (default is 0).\n            limit (int): The maximum number of items to retrieve (default is 10).\n            batch_size (int): The number of items in a a batch.\n            version (str | None): The version of the endpoint (default is None).\n            data_format (Literal[\"pandas\", \"json\"]): The desired format for the response (default is \"pandas\").\n                For \"json\" formats, the returned type is a json decoded type, in this case a list of dict's.\n        \n        Returns:\n            pd.DataFrame | list[dict]: The retrieved metadata in the specified format.\n\nFILE\n    /Users/jmatias/Documents/develop/aiod-py-sdk/src/aiod_sdk/resources/datasets.py\n\n\n</pre> In\u00a0[4]: Copied! <pre>aiod.datasets.counts()\n</pre> aiod.datasets.counts() Out[4]: <pre>41114</pre> In\u00a0[5]: Copied! <pre>datasets = aiod.datasets.get_list(offset=300, limit=2)\ndatasets[[\"platform\", \"platform_resource_identifier\", \"name\", \"date_published\"]]\n</pre> datasets = aiod.datasets.get_list(offset=300, limit=2) datasets[[\"platform\", \"platform_resource_identifier\", \"name\", \"date_published\"]] Out[5]: platform platform_resource_identifier name date_published 0 openml 436 rosowky 2014-09-28T23:37:11 1 openml 437 garrat 2014-09-28T23:37:13 In\u00a0[6]: Copied! <pre>metadata_dataset302 = aiod.datasets.get_asset(identifier=302)\nmetadata_dataset302\n</pre> metadata_dataset302 = aiod.datasets.get_asset(identifier=302) metadata_dataset302 Out[6]: <pre>platform                                                                   openml\nplatform_resource_identifier                                                  437\nname                                                                       garrat\ndate_published                                                2014-09-28T23:37:13\nsame_as                               https://www.openml.org/api/v1/json/data/437\nis_accessible_for_free                                                       True\nversion                                                                         1\nai_asset_identifier                                                           307\nai_resource_identifier                                                        317\naiod_entry                      {'editor': [], 'status': 'published', 'date_mo...\nalternate_name                                                                 []\napplication_area                                                               []\ncitation                                                                       []\ncontact                                                                        []\ncreator                                                                        []\ndescription                     {'plain': '**Author**:   \n**Source**: Unknown ...\ndistribution                    [{'content_url': 'https://api.openml.org/data/...\nfunder                                                                         []\nhas_part                                                                       []\nindustrial_sector                                                              []\nis_part_of                                                                     []\nkeyword                                           [machine learning, mathematics]\nlicense                                                                    public\nmedia                                                                          []\nnote                                                                           []\nrelevant_link                                                                  []\nrelevant_resource                                                              []\nrelevant_to                                                                    []\nresearch_area                                                                  []\nscientific_domain                                                              []\nsize                                           {'unit': 'instances', 'value': 10}\nidentifier                                                                    302\ndtype: object</pre> In\u00a0[7]: Copied! <pre>data = await aiod.datasets.get_list_async(offset=300, limit=5, batch_size=3)\ndata[[\"platform\", \"name\", \"identifier\", \"is_accessible_for_free\"]]\n</pre> data = await aiod.datasets.get_list_async(offset=300, limit=5, batch_size=3) data[[\"platform\", \"name\", \"identifier\", \"is_accessible_for_free\"]] Out[7]: platform name identifier is_accessible_for_free 0 openml rosowky 301 True 1 openml garrat 302 True 2 openml doherty 303 True 3 openml chang 304 True 4 openml qsabr2 305 True In\u00a0[11]: Copied! <pre>aiod.config.api_base_url = \"https://aiod-dev.i3a.es/\"\naiod.config.auth_server_url = \"https://aiod-dev.i3a.es/aiod-auth/\"\n</pre> aiod.config.api_base_url = \"https://aiod-dev.i3a.es/\" aiod.config.auth_server_url = \"https://aiod-dev.i3a.es/aiod-auth/\" In\u00a0[9]: Copied! <pre>aiod.login(username=\"USERNAME\", password=\"PASSWORD\")\n# aiod.get_current_user()\n</pre> aiod.login(username=\"USERNAME\", password=\"PASSWORD\") # aiod.get_current_user() In\u00a0[9]: Copied! <pre>aiod.logout()\n</pre> aiod.logout() In\u00a0[12]: Copied! <pre>aiod.get_current_user()\n</pre> aiod.get_current_user() Out[12]: <pre>User(name='jsmatias', roles=('offline_access', 'uma_authorization', 'default-roles-aiod'))</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"example/#example-usage","title":"Example usage\u00b6","text":"<p>To use <code>aiod</code> in a project:</p>"},{"location":"example/#async-methods","title":"Async methods\u00b6","text":""},{"location":"example/#authentication","title":"Authentication\u00b6","text":""},{"location":"api/case_studies/","title":"Case Studies","text":""},{"location":"api/case_studies/#aiod.case_studies.counts","title":"<code>counts(*, version=None, per_platform=False)</code>","text":"<p>Retrieve the number of case studies assets in the metadata catalogue.</p> <p>Parameters:</p> Name Type Description Default <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>per_platform</code> <code>bool</code> <p>Whether to list counts per platform (default is False).</p> <code>False</code> <p>Returns:</p> Type Description <code>int | dict[str, int]</code> <p>The number case studies assets in the metadata catalogue. If the parameter per_platform is True, it returns a dictionary with platform names as keys and the number of case studies assets from that platform as values.</p>"},{"location":"api/case_studies/#aiod.case_studies.get_asset","title":"<code>get_asset(identifier, *, version=None, data_format='pandas')</code>","text":"<p>Retrieve metadata for a specific case studies.</p> <p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>int</code> <p>The identifier of the case studies to retrieve.</p> required <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a dict.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>Series | dict</code> <p>The retrieved metadata for the specified case studies.</p>"},{"location":"api/case_studies/#aiod.case_studies.get_asset_from_platform","title":"<code>get_asset_from_platform(*, platform, platform_identifier, version=None, data_format='pandas')</code>","text":"<p>Retrieve metadata for a specific case studies identified by the external platform identifier.</p> <p>Parameters:</p> Name Type Description Default <code>platform</code> <code>str</code> <p>The platform where the case studies asset is retrieved from.</p> required <code>platform_identifier</code> <code>str</code> <p>The identifier under which the case studies is known by the platform.</p> required <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a dict.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>Series | dict</code> <p>The retrieved metadata for the specified case studies.</p>"},{"location":"api/case_studies/#aiod.case_studies.get_assets_async","title":"<code>get_assets_async(identifiers, *, version=None, data_format='pandas')</code>  <code>async</code>","text":"<p>Asynchronously retrieve metadata for a list of case studies identifiers.</p> <p>Parameters:</p> Name Type Description Default <code>identifiers</code> <code>list[int]</code> <p>The list of identifiers of the case studies to retrieve.</p> required <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a list of dicts.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>DataFrame | list[dict]</code> <p>The retrieved metadata for the specified case studies.</p>"},{"location":"api/case_studies/#aiod.case_studies.get_content","title":"<code>get_content(*, identifier, distribution_idx=0, version=None)</code>","text":"<p>Retrieve the data content of a specific case studies.</p> <p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>int</code> <p>The identifier of the case studies asset.</p> required <code>distribution_idx</code> <code>int</code> <p>The index of a specific distribution from the distribution list (default is 0).</p> <code>0</code> <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <p>Returns:</p> Type Description <code>bytes</code> <p>The data content for the specified case studies.</p>"},{"location":"api/case_studies/#aiod.case_studies.get_list","title":"<code>get_list(*, platform=None, offset=0, limit=10, version=None, data_format='pandas')</code>","text":"<p>Retrieve a list of case studies from the catalogue.</p> <p>Parameters:</p> Name Type Description Default <code>platform</code> <code>str | None</code> <p>Return metadata of case studies assets of this platform (default is None).</p> <code>None</code> <code>offset</code> <code>int</code> <p>The offset for pagination (default is 0).</p> <code>0</code> <code>limit</code> <code>int</code> <p>The maximum number of items to retrieve (default is 10).</p> <code>10</code> <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, i.e. in this case a list of dicts.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>DataFrame | list[dict]</code> <p>The retrieved metadata in the specified format.</p>"},{"location":"api/case_studies/#aiod.case_studies.get_list_async","title":"<code>get_list_async(*, offset=0, limit=100, batch_size=10, version=None, data_format='pandas')</code>  <code>async</code>","text":"<p>Asynchronously retrieve a list of case studies from the catalogue in batches.</p> <p>Parameters:</p> Name Type Description Default <code>offset</code> <code>int</code> <p>The offset for pagination (default is 0).</p> <code>0</code> <code>limit</code> <code>int</code> <p>The maximum number of items to retrieve (default is 10).</p> <code>100</code> <code>batch_size</code> <code>int</code> <p>The number of items in a a batch.</p> <code>10</code> <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a list of dicts.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>DataFrame | list[dict]</code> <p>The retrieved metadata in the specified format.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>Batch size must be larger than 0.</p>"},{"location":"api/computational_assets/","title":"Computational Assets","text":""},{"location":"api/computational_assets/#aiod.computational_assets.counts","title":"<code>counts(*, version=None, per_platform=False)</code>","text":"<p>Retrieve the number of computational assets assets in the metadata catalogue.</p> <p>Parameters:</p> Name Type Description Default <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>per_platform</code> <code>bool</code> <p>Whether to list counts per platform (default is False).</p> <code>False</code> <p>Returns:</p> Type Description <code>int | dict[str, int]</code> <p>The number computational assets assets in the metadata catalogue. If the parameter per_platform is True, it returns a dictionary with platform names as keys and the number of computational assets assets from that platform as values.</p>"},{"location":"api/computational_assets/#aiod.computational_assets.get_asset","title":"<code>get_asset(identifier, *, version=None, data_format='pandas')</code>","text":"<p>Retrieve metadata for a specific computational assets.</p> <p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>int</code> <p>The identifier of the computational assets to retrieve.</p> required <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a dict.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>Series | dict</code> <p>The retrieved metadata for the specified computational assets.</p>"},{"location":"api/computational_assets/#aiod.computational_assets.get_asset_from_platform","title":"<code>get_asset_from_platform(*, platform, platform_identifier, version=None, data_format='pandas')</code>","text":"<p>Retrieve metadata for a specific computational assets identified by the external platform identifier.</p> <p>Parameters:</p> Name Type Description Default <code>platform</code> <code>str</code> <p>The platform where the computational assets asset is retrieved from.</p> required <code>platform_identifier</code> <code>str</code> <p>The identifier under which the computational assets is known by the platform.</p> required <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a dict.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>Series | dict</code> <p>The retrieved metadata for the specified computational assets.</p>"},{"location":"api/computational_assets/#aiod.computational_assets.get_assets_async","title":"<code>get_assets_async(identifiers, *, version=None, data_format='pandas')</code>  <code>async</code>","text":"<p>Asynchronously retrieve metadata for a list of computational assets identifiers.</p> <p>Parameters:</p> Name Type Description Default <code>identifiers</code> <code>list[int]</code> <p>The list of identifiers of the computational assets to retrieve.</p> required <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a list of dicts.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>DataFrame | list[dict]</code> <p>The retrieved metadata for the specified computational assets.</p>"},{"location":"api/computational_assets/#aiod.computational_assets.get_content","title":"<code>get_content(*, identifier, distribution_idx=0, version=None)</code>","text":"<p>Retrieve the data content of a specific computational assets.</p> <p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>int</code> <p>The identifier of the computational assets asset.</p> required <code>distribution_idx</code> <code>int</code> <p>The index of a specific distribution from the distribution list (default is 0).</p> <code>0</code> <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <p>Returns:</p> Type Description <code>bytes</code> <p>The data content for the specified computational assets.</p>"},{"location":"api/computational_assets/#aiod.computational_assets.get_list","title":"<code>get_list(*, platform=None, offset=0, limit=10, version=None, data_format='pandas')</code>","text":"<p>Retrieve a list of computational assets from the catalogue.</p> <p>Parameters:</p> Name Type Description Default <code>platform</code> <code>str | None</code> <p>Return metadata of computational assets assets of this platform (default is None).</p> <code>None</code> <code>offset</code> <code>int</code> <p>The offset for pagination (default is 0).</p> <code>0</code> <code>limit</code> <code>int</code> <p>The maximum number of items to retrieve (default is 10).</p> <code>10</code> <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, i.e. in this case a list of dicts.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>DataFrame | list[dict]</code> <p>The retrieved metadata in the specified format.</p>"},{"location":"api/computational_assets/#aiod.computational_assets.get_list_async","title":"<code>get_list_async(*, offset=0, limit=100, batch_size=10, version=None, data_format='pandas')</code>  <code>async</code>","text":"<p>Asynchronously retrieve a list of computational assets from the catalogue in batches.</p> <p>Parameters:</p> Name Type Description Default <code>offset</code> <code>int</code> <p>The offset for pagination (default is 0).</p> <code>0</code> <code>limit</code> <code>int</code> <p>The maximum number of items to retrieve (default is 10).</p> <code>100</code> <code>batch_size</code> <code>int</code> <p>The number of items in a a batch.</p> <code>10</code> <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a list of dicts.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>DataFrame | list[dict]</code> <p>The retrieved metadata in the specified format.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>Batch size must be larger than 0.</p>"},{"location":"api/contacts/","title":"Contacts","text":""},{"location":"api/contacts/#aiod.contacts.counts","title":"<code>counts(*, version=None, per_platform=False)</code>","text":"<p>Retrieve the number of contacts assets in the metadata catalogue.</p> <p>Parameters:</p> Name Type Description Default <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>per_platform</code> <code>bool</code> <p>Whether to list counts per platform (default is False).</p> <code>False</code> <p>Returns:</p> Type Description <code>int | dict[str, int]</code> <p>The number contacts assets in the metadata catalogue. If the parameter per_platform is True, it returns a dictionary with platform names as keys and the number of contacts assets from that platform as values.</p>"},{"location":"api/contacts/#aiod.contacts.get_asset","title":"<code>get_asset(identifier, *, version=None, data_format='pandas')</code>","text":"<p>Retrieve metadata for a specific contacts.</p> <p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>int</code> <p>The identifier of the contacts to retrieve.</p> required <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a dict.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>Series | dict</code> <p>The retrieved metadata for the specified contacts.</p>"},{"location":"api/contacts/#aiod.contacts.get_asset_from_platform","title":"<code>get_asset_from_platform(*, platform, platform_identifier, version=None, data_format='pandas')</code>","text":"<p>Retrieve metadata for a specific contacts identified by the external platform identifier.</p> <p>Parameters:</p> Name Type Description Default <code>platform</code> <code>str</code> <p>The platform where the contacts asset is retrieved from.</p> required <code>platform_identifier</code> <code>str</code> <p>The identifier under which the contacts is known by the platform.</p> required <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a dict.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>Series | dict</code> <p>The retrieved metadata for the specified contacts.</p>"},{"location":"api/contacts/#aiod.contacts.get_assets_async","title":"<code>get_assets_async(identifiers, *, version=None, data_format='pandas')</code>  <code>async</code>","text":"<p>Asynchronously retrieve metadata for a list of contacts identifiers.</p> <p>Parameters:</p> Name Type Description Default <code>identifiers</code> <code>list[int]</code> <p>The list of identifiers of the contacts to retrieve.</p> required <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a list of dicts.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>DataFrame | list[dict]</code> <p>The retrieved metadata for the specified contacts.</p>"},{"location":"api/contacts/#aiod.contacts.get_content","title":"<code>get_content(*, identifier, distribution_idx=0, version=None)</code>","text":"<p>Retrieve the data content of a specific contacts.</p> <p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>int</code> <p>The identifier of the contacts asset.</p> required <code>distribution_idx</code> <code>int</code> <p>The index of a specific distribution from the distribution list (default is 0).</p> <code>0</code> <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <p>Returns:</p> Type Description <code>bytes</code> <p>The data content for the specified contacts.</p>"},{"location":"api/contacts/#aiod.contacts.get_list","title":"<code>get_list(*, platform=None, offset=0, limit=10, version=None, data_format='pandas')</code>","text":"<p>Retrieve a list of contacts from the catalogue.</p> <p>Parameters:</p> Name Type Description Default <code>platform</code> <code>str | None</code> <p>Return metadata of contacts assets of this platform (default is None).</p> <code>None</code> <code>offset</code> <code>int</code> <p>The offset for pagination (default is 0).</p> <code>0</code> <code>limit</code> <code>int</code> <p>The maximum number of items to retrieve (default is 10).</p> <code>10</code> <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, i.e. in this case a list of dicts.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>DataFrame | list[dict]</code> <p>The retrieved metadata in the specified format.</p>"},{"location":"api/contacts/#aiod.contacts.get_list_async","title":"<code>get_list_async(*, offset=0, limit=100, batch_size=10, version=None, data_format='pandas')</code>  <code>async</code>","text":"<p>Asynchronously retrieve a list of contacts from the catalogue in batches.</p> <p>Parameters:</p> Name Type Description Default <code>offset</code> <code>int</code> <p>The offset for pagination (default is 0).</p> <code>0</code> <code>limit</code> <code>int</code> <p>The maximum number of items to retrieve (default is 10).</p> <code>100</code> <code>batch_size</code> <code>int</code> <p>The number of items in a a batch.</p> <code>10</code> <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a list of dicts.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>DataFrame | list[dict]</code> <p>The retrieved metadata in the specified format.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>Batch size must be larger than 0.</p>"},{"location":"api/datasets/","title":"Datasets","text":""},{"location":"api/datasets/#aiod.datasets.counts","title":"<code>counts(*, version=None, per_platform=False)</code>","text":"<p>Retrieve the number of datasets assets in the metadata catalogue.</p> <p>Parameters:</p> Name Type Description Default <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>per_platform</code> <code>bool</code> <p>Whether to list counts per platform (default is False).</p> <code>False</code> <p>Returns:</p> Type Description <code>int | dict[str, int]</code> <p>The number datasets assets in the metadata catalogue. If the parameter per_platform is True, it returns a dictionary with platform names as keys and the number of datasets assets from that platform as values.</p>"},{"location":"api/datasets/#aiod.datasets.get_asset","title":"<code>get_asset(identifier, *, version=None, data_format='pandas')</code>","text":"<p>Retrieve metadata for a specific datasets.</p> <p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>int</code> <p>The identifier of the datasets to retrieve.</p> required <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a dict.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>Series | dict</code> <p>The retrieved metadata for the specified datasets.</p>"},{"location":"api/datasets/#aiod.datasets.get_asset_from_platform","title":"<code>get_asset_from_platform(*, platform, platform_identifier, version=None, data_format='pandas')</code>","text":"<p>Retrieve metadata for a specific datasets identified by the external platform identifier.</p> <p>Parameters:</p> Name Type Description Default <code>platform</code> <code>str</code> <p>The platform where the datasets asset is retrieved from.</p> required <code>platform_identifier</code> <code>str</code> <p>The identifier under which the datasets is known by the platform.</p> required <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a dict.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>Series | dict</code> <p>The retrieved metadata for the specified datasets.</p>"},{"location":"api/datasets/#aiod.datasets.get_assets_async","title":"<code>get_assets_async(identifiers, *, version=None, data_format='pandas')</code>  <code>async</code>","text":"<p>Asynchronously retrieve metadata for a list of datasets identifiers.</p> <p>Parameters:</p> Name Type Description Default <code>identifiers</code> <code>list[int]</code> <p>The list of identifiers of the datasets to retrieve.</p> required <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a list of dicts.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>DataFrame | list[dict]</code> <p>The retrieved metadata for the specified datasets.</p>"},{"location":"api/datasets/#aiod.datasets.get_content","title":"<code>get_content(*, identifier, distribution_idx=0, version=None)</code>","text":"<p>Retrieve the data content of a specific datasets.</p> <p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>int</code> <p>The identifier of the datasets asset.</p> required <code>distribution_idx</code> <code>int</code> <p>The index of a specific distribution from the distribution list (default is 0).</p> <code>0</code> <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <p>Returns:</p> Type Description <code>bytes</code> <p>The data content for the specified datasets.</p>"},{"location":"api/datasets/#aiod.datasets.get_list","title":"<code>get_list(*, platform=None, offset=0, limit=10, version=None, data_format='pandas')</code>","text":"<p>Retrieve a list of datasets from the catalogue.</p> <p>Parameters:</p> Name Type Description Default <code>platform</code> <code>str | None</code> <p>Return metadata of datasets assets of this platform (default is None).</p> <code>None</code> <code>offset</code> <code>int</code> <p>The offset for pagination (default is 0).</p> <code>0</code> <code>limit</code> <code>int</code> <p>The maximum number of items to retrieve (default is 10).</p> <code>10</code> <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, i.e. in this case a list of dicts.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>DataFrame | list[dict]</code> <p>The retrieved metadata in the specified format.</p>"},{"location":"api/datasets/#aiod.datasets.get_list_async","title":"<code>get_list_async(*, offset=0, limit=100, batch_size=10, version=None, data_format='pandas')</code>  <code>async</code>","text":"<p>Asynchronously retrieve a list of datasets from the catalogue in batches.</p> <p>Parameters:</p> Name Type Description Default <code>offset</code> <code>int</code> <p>The offset for pagination (default is 0).</p> <code>0</code> <code>limit</code> <code>int</code> <p>The maximum number of items to retrieve (default is 10).</p> <code>100</code> <code>batch_size</code> <code>int</code> <p>The number of items in a a batch.</p> <code>10</code> <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a list of dicts.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>DataFrame | list[dict]</code> <p>The retrieved metadata in the specified format.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>Batch size must be larger than 0.</p>"},{"location":"api/datasets/#aiod.datasets.search","title":"<code>search(query, *, platforms=None, offset=0, limit=10, search_field=None, get_all=True, version=None, data_format='pandas', asset_type)</code>","text":"<p>Search metadata for datasets type using the Elasticsearch endpoint of the AIoD metadata catalogue.</p> <p>Parameters:</p> Name Type Description Default <code>search</code> <p>The string to be matched against the search fields.</p> required <code>platforms</code> <code>list[str] | None</code> <p>The platforms to filter the search results. If None, results from all platforms will be returned (default is None).</p> <code>None</code> <code>offset</code> <code>int</code> <p>The offset for pagination (default is 0).</p> <code>0</code> <code>limit</code> <code>int</code> <p>The maximum number of results to retrieve (default is 10).</p> <code>10</code> <code>search_field</code> <code>None | Literal['name', 'issn', 'description_html', 'description_plain']</code> <p>The specific fields to search within. If None, the query will be matched against all fields (default is None).</p> <code>None</code> <code>get_all</code> <code>bool</code> <p>If true, a request to the database is made to retrieve all data. If false, only the indexed information is returned. (default is True).</p> <code>True</code> <code>version</code> <code>str | None</code> <p>The version of the endpoint to use (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a list of dict's.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>DataFrame | list[dict]</code> <p>The retrieved metadata in the specified format.</p>"},{"location":"api/educational_resources/","title":"Educational Resources","text":""},{"location":"api/educational_resources/#aiod.educational_resources.counts","title":"<code>counts(*, version=None, per_platform=False)</code>","text":"<p>Retrieve the number of educational resources assets in the metadata catalogue.</p> <p>Parameters:</p> Name Type Description Default <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>per_platform</code> <code>bool</code> <p>Whether to list counts per platform (default is False).</p> <code>False</code> <p>Returns:</p> Type Description <code>int | dict[str, int]</code> <p>The number educational resources assets in the metadata catalogue. If the parameter per_platform is True, it returns a dictionary with platform names as keys and the number of educational resources assets from that platform as values.</p>"},{"location":"api/educational_resources/#aiod.educational_resources.get_asset","title":"<code>get_asset(identifier, *, version=None, data_format='pandas')</code>","text":"<p>Retrieve metadata for a specific educational resources.</p> <p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>int</code> <p>The identifier of the educational resources to retrieve.</p> required <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a dict.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>Series | dict</code> <p>The retrieved metadata for the specified educational resources.</p>"},{"location":"api/educational_resources/#aiod.educational_resources.get_asset_from_platform","title":"<code>get_asset_from_platform(*, platform, platform_identifier, version=None, data_format='pandas')</code>","text":"<p>Retrieve metadata for a specific educational resources identified by the external platform identifier.</p> <p>Parameters:</p> Name Type Description Default <code>platform</code> <code>str</code> <p>The platform where the educational resources asset is retrieved from.</p> required <code>platform_identifier</code> <code>str</code> <p>The identifier under which the educational resources is known by the platform.</p> required <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a dict.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>Series | dict</code> <p>The retrieved metadata for the specified educational resources.</p>"},{"location":"api/educational_resources/#aiod.educational_resources.get_assets_async","title":"<code>get_assets_async(identifiers, *, version=None, data_format='pandas')</code>  <code>async</code>","text":"<p>Asynchronously retrieve metadata for a list of educational resources identifiers.</p> <p>Parameters:</p> Name Type Description Default <code>identifiers</code> <code>list[int]</code> <p>The list of identifiers of the educational resources to retrieve.</p> required <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a list of dicts.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>DataFrame | list[dict]</code> <p>The retrieved metadata for the specified educational resources.</p>"},{"location":"api/educational_resources/#aiod.educational_resources.get_content","title":"<code>get_content(*, identifier, distribution_idx=0, version=None)</code>","text":"<p>Retrieve the data content of a specific educational resources.</p> <p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>int</code> <p>The identifier of the educational resources asset.</p> required <code>distribution_idx</code> <code>int</code> <p>The index of a specific distribution from the distribution list (default is 0).</p> <code>0</code> <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <p>Returns:</p> Type Description <code>bytes</code> <p>The data content for the specified educational resources.</p>"},{"location":"api/educational_resources/#aiod.educational_resources.get_list","title":"<code>get_list(*, platform=None, offset=0, limit=10, version=None, data_format='pandas')</code>","text":"<p>Retrieve a list of educational resources from the catalogue.</p> <p>Parameters:</p> Name Type Description Default <code>platform</code> <code>str | None</code> <p>Return metadata of educational resources assets of this platform (default is None).</p> <code>None</code> <code>offset</code> <code>int</code> <p>The offset for pagination (default is 0).</p> <code>0</code> <code>limit</code> <code>int</code> <p>The maximum number of items to retrieve (default is 10).</p> <code>10</code> <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, i.e. in this case a list of dicts.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>DataFrame | list[dict]</code> <p>The retrieved metadata in the specified format.</p>"},{"location":"api/educational_resources/#aiod.educational_resources.get_list_async","title":"<code>get_list_async(*, offset=0, limit=100, batch_size=10, version=None, data_format='pandas')</code>  <code>async</code>","text":"<p>Asynchronously retrieve a list of educational resources from the catalogue in batches.</p> <p>Parameters:</p> Name Type Description Default <code>offset</code> <code>int</code> <p>The offset for pagination (default is 0).</p> <code>0</code> <code>limit</code> <code>int</code> <p>The maximum number of items to retrieve (default is 10).</p> <code>100</code> <code>batch_size</code> <code>int</code> <p>The number of items in a a batch.</p> <code>10</code> <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a list of dicts.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>DataFrame | list[dict]</code> <p>The retrieved metadata in the specified format.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>Batch size must be larger than 0.</p>"},{"location":"api/events/","title":"Events","text":""},{"location":"api/events/#aiod.events.counts","title":"<code>counts(*, version=None, per_platform=False)</code>","text":"<p>Retrieve the number of events assets in the metadata catalogue.</p> <p>Parameters:</p> Name Type Description Default <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>per_platform</code> <code>bool</code> <p>Whether to list counts per platform (default is False).</p> <code>False</code> <p>Returns:</p> Type Description <code>int | dict[str, int]</code> <p>The number events assets in the metadata catalogue. If the parameter per_platform is True, it returns a dictionary with platform names as keys and the number of events assets from that platform as values.</p>"},{"location":"api/events/#aiod.events.get_asset","title":"<code>get_asset(identifier, *, version=None, data_format='pandas')</code>","text":"<p>Retrieve metadata for a specific events.</p> <p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>int</code> <p>The identifier of the events to retrieve.</p> required <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a dict.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>Series | dict</code> <p>The retrieved metadata for the specified events.</p>"},{"location":"api/events/#aiod.events.get_asset_from_platform","title":"<code>get_asset_from_platform(*, platform, platform_identifier, version=None, data_format='pandas')</code>","text":"<p>Retrieve metadata for a specific events identified by the external platform identifier.</p> <p>Parameters:</p> Name Type Description Default <code>platform</code> <code>str</code> <p>The platform where the events asset is retrieved from.</p> required <code>platform_identifier</code> <code>str</code> <p>The identifier under which the events is known by the platform.</p> required <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a dict.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>Series | dict</code> <p>The retrieved metadata for the specified events.</p>"},{"location":"api/events/#aiod.events.get_assets_async","title":"<code>get_assets_async(identifiers, *, version=None, data_format='pandas')</code>  <code>async</code>","text":"<p>Asynchronously retrieve metadata for a list of events identifiers.</p> <p>Parameters:</p> Name Type Description Default <code>identifiers</code> <code>list[int]</code> <p>The list of identifiers of the events to retrieve.</p> required <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a list of dicts.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>DataFrame | list[dict]</code> <p>The retrieved metadata for the specified events.</p>"},{"location":"api/events/#aiod.events.get_content","title":"<code>get_content(*, identifier, distribution_idx=0, version=None)</code>","text":"<p>Retrieve the data content of a specific events.</p> <p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>int</code> <p>The identifier of the events asset.</p> required <code>distribution_idx</code> <code>int</code> <p>The index of a specific distribution from the distribution list (default is 0).</p> <code>0</code> <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <p>Returns:</p> Type Description <code>bytes</code> <p>The data content for the specified events.</p>"},{"location":"api/events/#aiod.events.get_list","title":"<code>get_list(*, platform=None, offset=0, limit=10, version=None, data_format='pandas')</code>","text":"<p>Retrieve a list of events from the catalogue.</p> <p>Parameters:</p> Name Type Description Default <code>platform</code> <code>str | None</code> <p>Return metadata of events assets of this platform (default is None).</p> <code>None</code> <code>offset</code> <code>int</code> <p>The offset for pagination (default is 0).</p> <code>0</code> <code>limit</code> <code>int</code> <p>The maximum number of items to retrieve (default is 10).</p> <code>10</code> <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, i.e. in this case a list of dicts.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>DataFrame | list[dict]</code> <p>The retrieved metadata in the specified format.</p>"},{"location":"api/events/#aiod.events.get_list_async","title":"<code>get_list_async(*, offset=0, limit=100, batch_size=10, version=None, data_format='pandas')</code>  <code>async</code>","text":"<p>Asynchronously retrieve a list of events from the catalogue in batches.</p> <p>Parameters:</p> Name Type Description Default <code>offset</code> <code>int</code> <p>The offset for pagination (default is 0).</p> <code>0</code> <code>limit</code> <code>int</code> <p>The maximum number of items to retrieve (default is 10).</p> <code>100</code> <code>batch_size</code> <code>int</code> <p>The number of items in a a batch.</p> <code>10</code> <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a list of dicts.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>DataFrame | list[dict]</code> <p>The retrieved metadata in the specified format.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>Batch size must be larger than 0.</p>"},{"location":"api/events/#aiod.events.search","title":"<code>search(query, *, platforms=None, offset=0, limit=10, search_field=None, get_all=True, version=None, data_format='pandas', asset_type)</code>","text":"<p>Search metadata for events type using the Elasticsearch endpoint of the AIoD metadata catalogue.</p> <p>Parameters:</p> Name Type Description Default <code>search</code> <p>The string to be matched against the search fields.</p> required <code>platforms</code> <code>list[str] | None</code> <p>The platforms to filter the search results. If None, results from all platforms will be returned (default is None).</p> <code>None</code> <code>offset</code> <code>int</code> <p>The offset for pagination (default is 0).</p> <code>0</code> <code>limit</code> <code>int</code> <p>The maximum number of results to retrieve (default is 10).</p> <code>10</code> <code>search_field</code> <code>None | Literal['name', 'issn', 'description_html', 'description_plain']</code> <p>The specific fields to search within. If None, the query will be matched against all fields (default is None).</p> <code>None</code> <code>get_all</code> <code>bool</code> <p>If true, a request to the database is made to retrieve all data. If false, only the indexed information is returned. (default is True).</p> <code>True</code> <code>version</code> <code>str | None</code> <p>The version of the endpoint to use (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a list of dict's.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>DataFrame | list[dict]</code> <p>The retrieved metadata in the specified format.</p>"},{"location":"api/experiments/","title":"Experiments","text":""},{"location":"api/experiments/#aiod.experiments.counts","title":"<code>counts(*, version=None, per_platform=False)</code>","text":"<p>Retrieve the number of experiments assets in the metadata catalogue.</p> <p>Parameters:</p> Name Type Description Default <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>per_platform</code> <code>bool</code> <p>Whether to list counts per platform (default is False).</p> <code>False</code> <p>Returns:</p> Type Description <code>int | dict[str, int]</code> <p>The number experiments assets in the metadata catalogue. If the parameter per_platform is True, it returns a dictionary with platform names as keys and the number of experiments assets from that platform as values.</p>"},{"location":"api/experiments/#aiod.experiments.get_asset","title":"<code>get_asset(identifier, *, version=None, data_format='pandas')</code>","text":"<p>Retrieve metadata for a specific experiments.</p> <p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>int</code> <p>The identifier of the experiments to retrieve.</p> required <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a dict.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>Series | dict</code> <p>The retrieved metadata for the specified experiments.</p>"},{"location":"api/experiments/#aiod.experiments.get_asset_from_platform","title":"<code>get_asset_from_platform(*, platform, platform_identifier, version=None, data_format='pandas')</code>","text":"<p>Retrieve metadata for a specific experiments identified by the external platform identifier.</p> <p>Parameters:</p> Name Type Description Default <code>platform</code> <code>str</code> <p>The platform where the experiments asset is retrieved from.</p> required <code>platform_identifier</code> <code>str</code> <p>The identifier under which the experiments is known by the platform.</p> required <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a dict.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>Series | dict</code> <p>The retrieved metadata for the specified experiments.</p>"},{"location":"api/experiments/#aiod.experiments.get_assets_async","title":"<code>get_assets_async(identifiers, *, version=None, data_format='pandas')</code>  <code>async</code>","text":"<p>Asynchronously retrieve metadata for a list of experiments identifiers.</p> <p>Parameters:</p> Name Type Description Default <code>identifiers</code> <code>list[int]</code> <p>The list of identifiers of the experiments to retrieve.</p> required <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a list of dicts.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>DataFrame | list[dict]</code> <p>The retrieved metadata for the specified experiments.</p>"},{"location":"api/experiments/#aiod.experiments.get_content","title":"<code>get_content(*, identifier, distribution_idx=0, version=None)</code>","text":"<p>Retrieve the data content of a specific experiments.</p> <p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>int</code> <p>The identifier of the experiments asset.</p> required <code>distribution_idx</code> <code>int</code> <p>The index of a specific distribution from the distribution list (default is 0).</p> <code>0</code> <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <p>Returns:</p> Type Description <code>bytes</code> <p>The data content for the specified experiments.</p>"},{"location":"api/experiments/#aiod.experiments.get_list","title":"<code>get_list(*, platform=None, offset=0, limit=10, version=None, data_format='pandas')</code>","text":"<p>Retrieve a list of experiments from the catalogue.</p> <p>Parameters:</p> Name Type Description Default <code>platform</code> <code>str | None</code> <p>Return metadata of experiments assets of this platform (default is None).</p> <code>None</code> <code>offset</code> <code>int</code> <p>The offset for pagination (default is 0).</p> <code>0</code> <code>limit</code> <code>int</code> <p>The maximum number of items to retrieve (default is 10).</p> <code>10</code> <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, i.e. in this case a list of dicts.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>DataFrame | list[dict]</code> <p>The retrieved metadata in the specified format.</p>"},{"location":"api/experiments/#aiod.experiments.get_list_async","title":"<code>get_list_async(*, offset=0, limit=100, batch_size=10, version=None, data_format='pandas')</code>  <code>async</code>","text":"<p>Asynchronously retrieve a list of experiments from the catalogue in batches.</p> <p>Parameters:</p> Name Type Description Default <code>offset</code> <code>int</code> <p>The offset for pagination (default is 0).</p> <code>0</code> <code>limit</code> <code>int</code> <p>The maximum number of items to retrieve (default is 10).</p> <code>100</code> <code>batch_size</code> <code>int</code> <p>The number of items in a a batch.</p> <code>10</code> <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a list of dicts.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>DataFrame | list[dict]</code> <p>The retrieved metadata in the specified format.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>Batch size must be larger than 0.</p>"},{"location":"api/experiments/#aiod.experiments.search","title":"<code>search(query, *, platforms=None, offset=0, limit=10, search_field=None, get_all=True, version=None, data_format='pandas', asset_type)</code>","text":"<p>Search metadata for experiments type using the Elasticsearch endpoint of the AIoD metadata catalogue.</p> <p>Parameters:</p> Name Type Description Default <code>search</code> <p>The string to be matched against the search fields.</p> required <code>platforms</code> <code>list[str] | None</code> <p>The platforms to filter the search results. If None, results from all platforms will be returned (default is None).</p> <code>None</code> <code>offset</code> <code>int</code> <p>The offset for pagination (default is 0).</p> <code>0</code> <code>limit</code> <code>int</code> <p>The maximum number of results to retrieve (default is 10).</p> <code>10</code> <code>search_field</code> <code>None | Literal['name', 'issn', 'description_html', 'description_plain']</code> <p>The specific fields to search within. If None, the query will be matched against all fields (default is None).</p> <code>None</code> <code>get_all</code> <code>bool</code> <p>If true, a request to the database is made to retrieve all data. If false, only the indexed information is returned. (default is True).</p> <code>True</code> <code>version</code> <code>str | None</code> <p>The version of the endpoint to use (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a list of dict's.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>DataFrame | list[dict]</code> <p>The retrieved metadata in the specified format.</p>"},{"location":"api/ml_models/","title":"ML Models","text":""},{"location":"api/ml_models/#aiod.ml_models.counts","title":"<code>counts(*, version=None, per_platform=False)</code>","text":"<p>Retrieve the number of ml models assets in the metadata catalogue.</p> <p>Parameters:</p> Name Type Description Default <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>per_platform</code> <code>bool</code> <p>Whether to list counts per platform (default is False).</p> <code>False</code> <p>Returns:</p> Type Description <code>int | dict[str, int]</code> <p>The number ml models assets in the metadata catalogue. If the parameter per_platform is True, it returns a dictionary with platform names as keys and the number of ml models assets from that platform as values.</p>"},{"location":"api/ml_models/#aiod.ml_models.get_asset","title":"<code>get_asset(identifier, *, version=None, data_format='pandas')</code>","text":"<p>Retrieve metadata for a specific ml models.</p> <p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>int</code> <p>The identifier of the ml models to retrieve.</p> required <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a dict.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>Series | dict</code> <p>The retrieved metadata for the specified ml models.</p>"},{"location":"api/ml_models/#aiod.ml_models.get_asset_from_platform","title":"<code>get_asset_from_platform(*, platform, platform_identifier, version=None, data_format='pandas')</code>","text":"<p>Retrieve metadata for a specific ml models identified by the external platform identifier.</p> <p>Parameters:</p> Name Type Description Default <code>platform</code> <code>str</code> <p>The platform where the ml models asset is retrieved from.</p> required <code>platform_identifier</code> <code>str</code> <p>The identifier under which the ml models is known by the platform.</p> required <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a dict.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>Series | dict</code> <p>The retrieved metadata for the specified ml models.</p>"},{"location":"api/ml_models/#aiod.ml_models.get_assets_async","title":"<code>get_assets_async(identifiers, *, version=None, data_format='pandas')</code>  <code>async</code>","text":"<p>Asynchronously retrieve metadata for a list of ml models identifiers.</p> <p>Parameters:</p> Name Type Description Default <code>identifiers</code> <code>list[int]</code> <p>The list of identifiers of the ml models to retrieve.</p> required <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a list of dicts.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>DataFrame | list[dict]</code> <p>The retrieved metadata for the specified ml models.</p>"},{"location":"api/ml_models/#aiod.ml_models.get_content","title":"<code>get_content(*, identifier, distribution_idx=0, version=None)</code>","text":"<p>Retrieve the data content of a specific ml models.</p> <p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>int</code> <p>The identifier of the ml models asset.</p> required <code>distribution_idx</code> <code>int</code> <p>The index of a specific distribution from the distribution list (default is 0).</p> <code>0</code> <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <p>Returns:</p> Type Description <code>bytes</code> <p>The data content for the specified ml models.</p>"},{"location":"api/ml_models/#aiod.ml_models.get_list","title":"<code>get_list(*, platform=None, offset=0, limit=10, version=None, data_format='pandas')</code>","text":"<p>Retrieve a list of ml models from the catalogue.</p> <p>Parameters:</p> Name Type Description Default <code>platform</code> <code>str | None</code> <p>Return metadata of ml models assets of this platform (default is None).</p> <code>None</code> <code>offset</code> <code>int</code> <p>The offset for pagination (default is 0).</p> <code>0</code> <code>limit</code> <code>int</code> <p>The maximum number of items to retrieve (default is 10).</p> <code>10</code> <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, i.e. in this case a list of dicts.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>DataFrame | list[dict]</code> <p>The retrieved metadata in the specified format.</p>"},{"location":"api/ml_models/#aiod.ml_models.get_list_async","title":"<code>get_list_async(*, offset=0, limit=100, batch_size=10, version=None, data_format='pandas')</code>  <code>async</code>","text":"<p>Asynchronously retrieve a list of ml models from the catalogue in batches.</p> <p>Parameters:</p> Name Type Description Default <code>offset</code> <code>int</code> <p>The offset for pagination (default is 0).</p> <code>0</code> <code>limit</code> <code>int</code> <p>The maximum number of items to retrieve (default is 10).</p> <code>100</code> <code>batch_size</code> <code>int</code> <p>The number of items in a a batch.</p> <code>10</code> <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a list of dicts.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>DataFrame | list[dict]</code> <p>The retrieved metadata in the specified format.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>Batch size must be larger than 0.</p>"},{"location":"api/ml_models/#aiod.ml_models.search","title":"<code>search(query, *, platforms=None, offset=0, limit=10, search_field=None, get_all=True, version=None, data_format='pandas', asset_type)</code>","text":"<p>Search metadata for ml models type using the Elasticsearch endpoint of the AIoD metadata catalogue.</p> <p>Parameters:</p> Name Type Description Default <code>search</code> <p>The string to be matched against the search fields.</p> required <code>platforms</code> <code>list[str] | None</code> <p>The platforms to filter the search results. If None, results from all platforms will be returned (default is None).</p> <code>None</code> <code>offset</code> <code>int</code> <p>The offset for pagination (default is 0).</p> <code>0</code> <code>limit</code> <code>int</code> <p>The maximum number of results to retrieve (default is 10).</p> <code>10</code> <code>search_field</code> <code>None | Literal['name', 'issn', 'description_html', 'description_plain']</code> <p>The specific fields to search within. If None, the query will be matched against all fields (default is None).</p> <code>None</code> <code>get_all</code> <code>bool</code> <p>If true, a request to the database is made to retrieve all data. If false, only the indexed information is returned. (default is True).</p> <code>True</code> <code>version</code> <code>str | None</code> <p>The version of the endpoint to use (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a list of dict's.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>DataFrame | list[dict]</code> <p>The retrieved metadata in the specified format.</p>"},{"location":"api/news/","title":"News","text":""},{"location":"api/news/#aiod.news.counts","title":"<code>counts(*, version=None, per_platform=False)</code>","text":"<p>Retrieve the number of news assets in the metadata catalogue.</p> <p>Parameters:</p> Name Type Description Default <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>per_platform</code> <code>bool</code> <p>Whether to list counts per platform (default is False).</p> <code>False</code> <p>Returns:</p> Type Description <code>int | dict[str, int]</code> <p>The number news assets in the metadata catalogue. If the parameter per_platform is True, it returns a dictionary with platform names as keys and the number of news assets from that platform as values.</p>"},{"location":"api/news/#aiod.news.get_asset","title":"<code>get_asset(identifier, *, version=None, data_format='pandas')</code>","text":"<p>Retrieve metadata for a specific news.</p> <p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>int</code> <p>The identifier of the news to retrieve.</p> required <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a dict.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>Series | dict</code> <p>The retrieved metadata for the specified news.</p>"},{"location":"api/news/#aiod.news.get_asset_from_platform","title":"<code>get_asset_from_platform(*, platform, platform_identifier, version=None, data_format='pandas')</code>","text":"<p>Retrieve metadata for a specific news identified by the external platform identifier.</p> <p>Parameters:</p> Name Type Description Default <code>platform</code> <code>str</code> <p>The platform where the news asset is retrieved from.</p> required <code>platform_identifier</code> <code>str</code> <p>The identifier under which the news is known by the platform.</p> required <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a dict.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>Series | dict</code> <p>The retrieved metadata for the specified news.</p>"},{"location":"api/news/#aiod.news.get_assets_async","title":"<code>get_assets_async(identifiers, *, version=None, data_format='pandas')</code>  <code>async</code>","text":"<p>Asynchronously retrieve metadata for a list of news identifiers.</p> <p>Parameters:</p> Name Type Description Default <code>identifiers</code> <code>list[int]</code> <p>The list of identifiers of the news to retrieve.</p> required <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a list of dicts.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>DataFrame | list[dict]</code> <p>The retrieved metadata for the specified news.</p>"},{"location":"api/news/#aiod.news.get_content","title":"<code>get_content(*, identifier, distribution_idx=0, version=None)</code>","text":"<p>Retrieve the data content of a specific news.</p> <p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>int</code> <p>The identifier of the news asset.</p> required <code>distribution_idx</code> <code>int</code> <p>The index of a specific distribution from the distribution list (default is 0).</p> <code>0</code> <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <p>Returns:</p> Type Description <code>bytes</code> <p>The data content for the specified news.</p>"},{"location":"api/news/#aiod.news.get_list","title":"<code>get_list(*, platform=None, offset=0, limit=10, version=None, data_format='pandas')</code>","text":"<p>Retrieve a list of news from the catalogue.</p> <p>Parameters:</p> Name Type Description Default <code>platform</code> <code>str | None</code> <p>Return metadata of news assets of this platform (default is None).</p> <code>None</code> <code>offset</code> <code>int</code> <p>The offset for pagination (default is 0).</p> <code>0</code> <code>limit</code> <code>int</code> <p>The maximum number of items to retrieve (default is 10).</p> <code>10</code> <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, i.e. in this case a list of dicts.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>DataFrame | list[dict]</code> <p>The retrieved metadata in the specified format.</p>"},{"location":"api/news/#aiod.news.get_list_async","title":"<code>get_list_async(*, offset=0, limit=100, batch_size=10, version=None, data_format='pandas')</code>  <code>async</code>","text":"<p>Asynchronously retrieve a list of news from the catalogue in batches.</p> <p>Parameters:</p> Name Type Description Default <code>offset</code> <code>int</code> <p>The offset for pagination (default is 0).</p> <code>0</code> <code>limit</code> <code>int</code> <p>The maximum number of items to retrieve (default is 10).</p> <code>100</code> <code>batch_size</code> <code>int</code> <p>The number of items in a a batch.</p> <code>10</code> <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a list of dicts.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>DataFrame | list[dict]</code> <p>The retrieved metadata in the specified format.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>Batch size must be larger than 0.</p>"},{"location":"api/news/#aiod.news.search","title":"<code>search(query, *, platforms=None, offset=0, limit=10, search_field=None, get_all=True, version=None, data_format='pandas', asset_type)</code>","text":"<p>Search metadata for news type using the Elasticsearch endpoint of the AIoD metadata catalogue.</p> <p>Parameters:</p> Name Type Description Default <code>search</code> <p>The string to be matched against the search fields.</p> required <code>platforms</code> <code>list[str] | None</code> <p>The platforms to filter the search results. If None, results from all platforms will be returned (default is None).</p> <code>None</code> <code>offset</code> <code>int</code> <p>The offset for pagination (default is 0).</p> <code>0</code> <code>limit</code> <code>int</code> <p>The maximum number of results to retrieve (default is 10).</p> <code>10</code> <code>search_field</code> <code>None | Literal['name', 'issn', 'description_html', 'description_plain']</code> <p>The specific fields to search within. If None, the query will be matched against all fields (default is None).</p> <code>None</code> <code>get_all</code> <code>bool</code> <p>If true, a request to the database is made to retrieve all data. If false, only the indexed information is returned. (default is True).</p> <code>True</code> <code>version</code> <code>str | None</code> <p>The version of the endpoint to use (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a list of dict's.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>DataFrame | list[dict]</code> <p>The retrieved metadata in the specified format.</p>"},{"location":"api/organisations/","title":"Organisations","text":""},{"location":"api/organisations/#aiod.organisations.counts","title":"<code>counts(*, version=None, per_platform=False)</code>","text":"<p>Retrieve the number of organisations assets in the metadata catalogue.</p> <p>Parameters:</p> Name Type Description Default <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>per_platform</code> <code>bool</code> <p>Whether to list counts per platform (default is False).</p> <code>False</code> <p>Returns:</p> Type Description <code>int | dict[str, int]</code> <p>The number organisations assets in the metadata catalogue. If the parameter per_platform is True, it returns a dictionary with platform names as keys and the number of organisations assets from that platform as values.</p>"},{"location":"api/organisations/#aiod.organisations.get_asset","title":"<code>get_asset(identifier, *, version=None, data_format='pandas')</code>","text":"<p>Retrieve metadata for a specific organisations.</p> <p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>int</code> <p>The identifier of the organisations to retrieve.</p> required <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a dict.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>Series | dict</code> <p>The retrieved metadata for the specified organisations.</p>"},{"location":"api/organisations/#aiod.organisations.get_asset_from_platform","title":"<code>get_asset_from_platform(*, platform, platform_identifier, version=None, data_format='pandas')</code>","text":"<p>Retrieve metadata for a specific organisations identified by the external platform identifier.</p> <p>Parameters:</p> Name Type Description Default <code>platform</code> <code>str</code> <p>The platform where the organisations asset is retrieved from.</p> required <code>platform_identifier</code> <code>str</code> <p>The identifier under which the organisations is known by the platform.</p> required <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a dict.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>Series | dict</code> <p>The retrieved metadata for the specified organisations.</p>"},{"location":"api/organisations/#aiod.organisations.get_assets_async","title":"<code>get_assets_async(identifiers, *, version=None, data_format='pandas')</code>  <code>async</code>","text":"<p>Asynchronously retrieve metadata for a list of organisations identifiers.</p> <p>Parameters:</p> Name Type Description Default <code>identifiers</code> <code>list[int]</code> <p>The list of identifiers of the organisations to retrieve.</p> required <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a list of dicts.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>DataFrame | list[dict]</code> <p>The retrieved metadata for the specified organisations.</p>"},{"location":"api/organisations/#aiod.organisations.get_content","title":"<code>get_content(*, identifier, distribution_idx=0, version=None)</code>","text":"<p>Retrieve the data content of a specific organisations.</p> <p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>int</code> <p>The identifier of the organisations asset.</p> required <code>distribution_idx</code> <code>int</code> <p>The index of a specific distribution from the distribution list (default is 0).</p> <code>0</code> <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <p>Returns:</p> Type Description <code>bytes</code> <p>The data content for the specified organisations.</p>"},{"location":"api/organisations/#aiod.organisations.get_list","title":"<code>get_list(*, platform=None, offset=0, limit=10, version=None, data_format='pandas')</code>","text":"<p>Retrieve a list of organisations from the catalogue.</p> <p>Parameters:</p> Name Type Description Default <code>platform</code> <code>str | None</code> <p>Return metadata of organisations assets of this platform (default is None).</p> <code>None</code> <code>offset</code> <code>int</code> <p>The offset for pagination (default is 0).</p> <code>0</code> <code>limit</code> <code>int</code> <p>The maximum number of items to retrieve (default is 10).</p> <code>10</code> <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, i.e. in this case a list of dicts.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>DataFrame | list[dict]</code> <p>The retrieved metadata in the specified format.</p>"},{"location":"api/organisations/#aiod.organisations.get_list_async","title":"<code>get_list_async(*, offset=0, limit=100, batch_size=10, version=None, data_format='pandas')</code>  <code>async</code>","text":"<p>Asynchronously retrieve a list of organisations from the catalogue in batches.</p> <p>Parameters:</p> Name Type Description Default <code>offset</code> <code>int</code> <p>The offset for pagination (default is 0).</p> <code>0</code> <code>limit</code> <code>int</code> <p>The maximum number of items to retrieve (default is 10).</p> <code>100</code> <code>batch_size</code> <code>int</code> <p>The number of items in a a batch.</p> <code>10</code> <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a list of dicts.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>DataFrame | list[dict]</code> <p>The retrieved metadata in the specified format.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>Batch size must be larger than 0.</p>"},{"location":"api/organisations/#aiod.organisations.search","title":"<code>search(query, *, platforms=None, offset=0, limit=10, search_field=None, get_all=True, version=None, data_format='pandas', asset_type)</code>","text":"<p>Search metadata for organisations type using the Elasticsearch endpoint of the AIoD metadata catalogue.</p> <p>Parameters:</p> Name Type Description Default <code>search</code> <p>The string to be matched against the search fields.</p> required <code>platforms</code> <code>list[str] | None</code> <p>The platforms to filter the search results. If None, results from all platforms will be returned (default is None).</p> <code>None</code> <code>offset</code> <code>int</code> <p>The offset for pagination (default is 0).</p> <code>0</code> <code>limit</code> <code>int</code> <p>The maximum number of results to retrieve (default is 10).</p> <code>10</code> <code>search_field</code> <code>None | Literal['name', 'issn', 'description_html', 'description_plain']</code> <p>The specific fields to search within. If None, the query will be matched against all fields (default is None).</p> <code>None</code> <code>get_all</code> <code>bool</code> <p>If true, a request to the database is made to retrieve all data. If false, only the indexed information is returned. (default is True).</p> <code>True</code> <code>version</code> <code>str | None</code> <p>The version of the endpoint to use (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a list of dict's.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>DataFrame | list[dict]</code> <p>The retrieved metadata in the specified format.</p>"},{"location":"api/persons/","title":"Persons","text":""},{"location":"api/persons/#aiod.persons.counts","title":"<code>counts(*, version=None, per_platform=False)</code>","text":"<p>Retrieve the number of persons assets in the metadata catalogue.</p> <p>Parameters:</p> Name Type Description Default <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>per_platform</code> <code>bool</code> <p>Whether to list counts per platform (default is False).</p> <code>False</code> <p>Returns:</p> Type Description <code>int | dict[str, int]</code> <p>The number persons assets in the metadata catalogue. If the parameter per_platform is True, it returns a dictionary with platform names as keys and the number of persons assets from that platform as values.</p>"},{"location":"api/persons/#aiod.persons.get_asset","title":"<code>get_asset(identifier, *, version=None, data_format='pandas')</code>","text":"<p>Retrieve metadata for a specific persons.</p> <p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>int</code> <p>The identifier of the persons to retrieve.</p> required <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a dict.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>Series | dict</code> <p>The retrieved metadata for the specified persons.</p>"},{"location":"api/persons/#aiod.persons.get_asset_from_platform","title":"<code>get_asset_from_platform(*, platform, platform_identifier, version=None, data_format='pandas')</code>","text":"<p>Retrieve metadata for a specific persons identified by the external platform identifier.</p> <p>Parameters:</p> Name Type Description Default <code>platform</code> <code>str</code> <p>The platform where the persons asset is retrieved from.</p> required <code>platform_identifier</code> <code>str</code> <p>The identifier under which the persons is known by the platform.</p> required <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a dict.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>Series | dict</code> <p>The retrieved metadata for the specified persons.</p>"},{"location":"api/persons/#aiod.persons.get_assets_async","title":"<code>get_assets_async(identifiers, *, version=None, data_format='pandas')</code>  <code>async</code>","text":"<p>Asynchronously retrieve metadata for a list of persons identifiers.</p> <p>Parameters:</p> Name Type Description Default <code>identifiers</code> <code>list[int]</code> <p>The list of identifiers of the persons to retrieve.</p> required <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a list of dicts.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>DataFrame | list[dict]</code> <p>The retrieved metadata for the specified persons.</p>"},{"location":"api/persons/#aiod.persons.get_content","title":"<code>get_content(*, identifier, distribution_idx=0, version=None)</code>","text":"<p>Retrieve the data content of a specific persons.</p> <p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>int</code> <p>The identifier of the persons asset.</p> required <code>distribution_idx</code> <code>int</code> <p>The index of a specific distribution from the distribution list (default is 0).</p> <code>0</code> <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <p>Returns:</p> Type Description <code>bytes</code> <p>The data content for the specified persons.</p>"},{"location":"api/persons/#aiod.persons.get_list","title":"<code>get_list(*, platform=None, offset=0, limit=10, version=None, data_format='pandas')</code>","text":"<p>Retrieve a list of persons from the catalogue.</p> <p>Parameters:</p> Name Type Description Default <code>platform</code> <code>str | None</code> <p>Return metadata of persons assets of this platform (default is None).</p> <code>None</code> <code>offset</code> <code>int</code> <p>The offset for pagination (default is 0).</p> <code>0</code> <code>limit</code> <code>int</code> <p>The maximum number of items to retrieve (default is 10).</p> <code>10</code> <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, i.e. in this case a list of dicts.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>DataFrame | list[dict]</code> <p>The retrieved metadata in the specified format.</p>"},{"location":"api/persons/#aiod.persons.get_list_async","title":"<code>get_list_async(*, offset=0, limit=100, batch_size=10, version=None, data_format='pandas')</code>  <code>async</code>","text":"<p>Asynchronously retrieve a list of persons from the catalogue in batches.</p> <p>Parameters:</p> Name Type Description Default <code>offset</code> <code>int</code> <p>The offset for pagination (default is 0).</p> <code>0</code> <code>limit</code> <code>int</code> <p>The maximum number of items to retrieve (default is 10).</p> <code>100</code> <code>batch_size</code> <code>int</code> <p>The number of items in a a batch.</p> <code>10</code> <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a list of dicts.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>DataFrame | list[dict]</code> <p>The retrieved metadata in the specified format.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>Batch size must be larger than 0.</p>"},{"location":"api/platforms/","title":"Platforms","text":"<p>aiod::platforms</p>"},{"location":"api/projects/","title":"Projects","text":""},{"location":"api/projects/#aiod.projects.counts","title":"<code>counts(*, version=None, per_platform=False)</code>","text":"<p>Retrieve the number of projects assets in the metadata catalogue.</p> <p>Parameters:</p> Name Type Description Default <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>per_platform</code> <code>bool</code> <p>Whether to list counts per platform (default is False).</p> <code>False</code> <p>Returns:</p> Type Description <code>int | dict[str, int]</code> <p>The number projects assets in the metadata catalogue. If the parameter per_platform is True, it returns a dictionary with platform names as keys and the number of projects assets from that platform as values.</p>"},{"location":"api/projects/#aiod.projects.get_asset","title":"<code>get_asset(identifier, *, version=None, data_format='pandas')</code>","text":"<p>Retrieve metadata for a specific projects.</p> <p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>int</code> <p>The identifier of the projects to retrieve.</p> required <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a dict.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>Series | dict</code> <p>The retrieved metadata for the specified projects.</p>"},{"location":"api/projects/#aiod.projects.get_asset_from_platform","title":"<code>get_asset_from_platform(*, platform, platform_identifier, version=None, data_format='pandas')</code>","text":"<p>Retrieve metadata for a specific projects identified by the external platform identifier.</p> <p>Parameters:</p> Name Type Description Default <code>platform</code> <code>str</code> <p>The platform where the projects asset is retrieved from.</p> required <code>platform_identifier</code> <code>str</code> <p>The identifier under which the projects is known by the platform.</p> required <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a dict.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>Series | dict</code> <p>The retrieved metadata for the specified projects.</p>"},{"location":"api/projects/#aiod.projects.get_assets_async","title":"<code>get_assets_async(identifiers, *, version=None, data_format='pandas')</code>  <code>async</code>","text":"<p>Asynchronously retrieve metadata for a list of projects identifiers.</p> <p>Parameters:</p> Name Type Description Default <code>identifiers</code> <code>list[int]</code> <p>The list of identifiers of the projects to retrieve.</p> required <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a list of dicts.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>DataFrame | list[dict]</code> <p>The retrieved metadata for the specified projects.</p>"},{"location":"api/projects/#aiod.projects.get_content","title":"<code>get_content(*, identifier, distribution_idx=0, version=None)</code>","text":"<p>Retrieve the data content of a specific projects.</p> <p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>int</code> <p>The identifier of the projects asset.</p> required <code>distribution_idx</code> <code>int</code> <p>The index of a specific distribution from the distribution list (default is 0).</p> <code>0</code> <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <p>Returns:</p> Type Description <code>bytes</code> <p>The data content for the specified projects.</p>"},{"location":"api/projects/#aiod.projects.get_list","title":"<code>get_list(*, platform=None, offset=0, limit=10, version=None, data_format='pandas')</code>","text":"<p>Retrieve a list of projects from the catalogue.</p> <p>Parameters:</p> Name Type Description Default <code>platform</code> <code>str | None</code> <p>Return metadata of projects assets of this platform (default is None).</p> <code>None</code> <code>offset</code> <code>int</code> <p>The offset for pagination (default is 0).</p> <code>0</code> <code>limit</code> <code>int</code> <p>The maximum number of items to retrieve (default is 10).</p> <code>10</code> <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, i.e. in this case a list of dicts.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>DataFrame | list[dict]</code> <p>The retrieved metadata in the specified format.</p>"},{"location":"api/projects/#aiod.projects.get_list_async","title":"<code>get_list_async(*, offset=0, limit=100, batch_size=10, version=None, data_format='pandas')</code>  <code>async</code>","text":"<p>Asynchronously retrieve a list of projects from the catalogue in batches.</p> <p>Parameters:</p> Name Type Description Default <code>offset</code> <code>int</code> <p>The offset for pagination (default is 0).</p> <code>0</code> <code>limit</code> <code>int</code> <p>The maximum number of items to retrieve (default is 10).</p> <code>100</code> <code>batch_size</code> <code>int</code> <p>The number of items in a a batch.</p> <code>10</code> <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a list of dicts.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>DataFrame | list[dict]</code> <p>The retrieved metadata in the specified format.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>Batch size must be larger than 0.</p>"},{"location":"api/projects/#aiod.projects.search","title":"<code>search(query, *, platforms=None, offset=0, limit=10, search_field=None, get_all=True, version=None, data_format='pandas', asset_type)</code>","text":"<p>Search metadata for projects type using the Elasticsearch endpoint of the AIoD metadata catalogue.</p> <p>Parameters:</p> Name Type Description Default <code>search</code> <p>The string to be matched against the search fields.</p> required <code>platforms</code> <code>list[str] | None</code> <p>The platforms to filter the search results. If None, results from all platforms will be returned (default is None).</p> <code>None</code> <code>offset</code> <code>int</code> <p>The offset for pagination (default is 0).</p> <code>0</code> <code>limit</code> <code>int</code> <p>The maximum number of results to retrieve (default is 10).</p> <code>10</code> <code>search_field</code> <code>None | Literal['name', 'issn', 'description_html', 'description_plain']</code> <p>The specific fields to search within. If None, the query will be matched against all fields (default is None).</p> <code>None</code> <code>get_all</code> <code>bool</code> <p>If true, a request to the database is made to retrieve all data. If false, only the indexed information is returned. (default is True).</p> <code>True</code> <code>version</code> <code>str | None</code> <p>The version of the endpoint to use (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a list of dict's.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>DataFrame | list[dict]</code> <p>The retrieved metadata in the specified format.</p>"},{"location":"api/publications/","title":"Publications","text":""},{"location":"api/publications/#aiod.publications.counts","title":"<code>counts(*, version=None, per_platform=False)</code>","text":"<p>Retrieve the number of publications assets in the metadata catalogue.</p> <p>Parameters:</p> Name Type Description Default <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>per_platform</code> <code>bool</code> <p>Whether to list counts per platform (default is False).</p> <code>False</code> <p>Returns:</p> Type Description <code>int | dict[str, int]</code> <p>The number publications assets in the metadata catalogue. If the parameter per_platform is True, it returns a dictionary with platform names as keys and the number of publications assets from that platform as values.</p>"},{"location":"api/publications/#aiod.publications.get_asset","title":"<code>get_asset(identifier, *, version=None, data_format='pandas')</code>","text":"<p>Retrieve metadata for a specific publications.</p> <p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>int</code> <p>The identifier of the publications to retrieve.</p> required <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a dict.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>Series | dict</code> <p>The retrieved metadata for the specified publications.</p>"},{"location":"api/publications/#aiod.publications.get_asset_from_platform","title":"<code>get_asset_from_platform(*, platform, platform_identifier, version=None, data_format='pandas')</code>","text":"<p>Retrieve metadata for a specific publications identified by the external platform identifier.</p> <p>Parameters:</p> Name Type Description Default <code>platform</code> <code>str</code> <p>The platform where the publications asset is retrieved from.</p> required <code>platform_identifier</code> <code>str</code> <p>The identifier under which the publications is known by the platform.</p> required <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a dict.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>Series | dict</code> <p>The retrieved metadata for the specified publications.</p>"},{"location":"api/publications/#aiod.publications.get_assets_async","title":"<code>get_assets_async(identifiers, *, version=None, data_format='pandas')</code>  <code>async</code>","text":"<p>Asynchronously retrieve metadata for a list of publications identifiers.</p> <p>Parameters:</p> Name Type Description Default <code>identifiers</code> <code>list[int]</code> <p>The list of identifiers of the publications to retrieve.</p> required <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a list of dicts.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>DataFrame | list[dict]</code> <p>The retrieved metadata for the specified publications.</p>"},{"location":"api/publications/#aiod.publications.get_content","title":"<code>get_content(*, identifier, distribution_idx=0, version=None)</code>","text":"<p>Retrieve the data content of a specific publications.</p> <p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>int</code> <p>The identifier of the publications asset.</p> required <code>distribution_idx</code> <code>int</code> <p>The index of a specific distribution from the distribution list (default is 0).</p> <code>0</code> <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <p>Returns:</p> Type Description <code>bytes</code> <p>The data content for the specified publications.</p>"},{"location":"api/publications/#aiod.publications.get_list","title":"<code>get_list(*, platform=None, offset=0, limit=10, version=None, data_format='pandas')</code>","text":"<p>Retrieve a list of publications from the catalogue.</p> <p>Parameters:</p> Name Type Description Default <code>platform</code> <code>str | None</code> <p>Return metadata of publications assets of this platform (default is None).</p> <code>None</code> <code>offset</code> <code>int</code> <p>The offset for pagination (default is 0).</p> <code>0</code> <code>limit</code> <code>int</code> <p>The maximum number of items to retrieve (default is 10).</p> <code>10</code> <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, i.e. in this case a list of dicts.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>DataFrame | list[dict]</code> <p>The retrieved metadata in the specified format.</p>"},{"location":"api/publications/#aiod.publications.get_list_async","title":"<code>get_list_async(*, offset=0, limit=100, batch_size=10, version=None, data_format='pandas')</code>  <code>async</code>","text":"<p>Asynchronously retrieve a list of publications from the catalogue in batches.</p> <p>Parameters:</p> Name Type Description Default <code>offset</code> <code>int</code> <p>The offset for pagination (default is 0).</p> <code>0</code> <code>limit</code> <code>int</code> <p>The maximum number of items to retrieve (default is 10).</p> <code>100</code> <code>batch_size</code> <code>int</code> <p>The number of items in a a batch.</p> <code>10</code> <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a list of dicts.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>DataFrame | list[dict]</code> <p>The retrieved metadata in the specified format.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>Batch size must be larger than 0.</p>"},{"location":"api/publications/#aiod.publications.search","title":"<code>search(query, *, platforms=None, offset=0, limit=10, search_field=None, get_all=True, version=None, data_format='pandas', asset_type)</code>","text":"<p>Search metadata for publications type using the Elasticsearch endpoint of the AIoD metadata catalogue.</p> <p>Parameters:</p> Name Type Description Default <code>search</code> <p>The string to be matched against the search fields.</p> required <code>platforms</code> <code>list[str] | None</code> <p>The platforms to filter the search results. If None, results from all platforms will be returned (default is None).</p> <code>None</code> <code>offset</code> <code>int</code> <p>The offset for pagination (default is 0).</p> <code>0</code> <code>limit</code> <code>int</code> <p>The maximum number of results to retrieve (default is 10).</p> <code>10</code> <code>search_field</code> <code>None | Literal['name', 'issn', 'description_html', 'description_plain']</code> <p>The specific fields to search within. If None, the query will be matched against all fields (default is None).</p> <code>None</code> <code>get_all</code> <code>bool</code> <p>If true, a request to the database is made to retrieve all data. If false, only the indexed information is returned. (default is True).</p> <code>True</code> <code>version</code> <code>str | None</code> <p>The version of the endpoint to use (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a list of dict's.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>DataFrame | list[dict]</code> <p>The retrieved metadata in the specified format.</p>"},{"location":"api/services/","title":"Services","text":""},{"location":"api/services/#aiod.services.counts","title":"<code>counts(*, version=None, per_platform=False)</code>","text":"<p>Retrieve the number of services assets in the metadata catalogue.</p> <p>Parameters:</p> Name Type Description Default <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>per_platform</code> <code>bool</code> <p>Whether to list counts per platform (default is False).</p> <code>False</code> <p>Returns:</p> Type Description <code>int | dict[str, int]</code> <p>The number services assets in the metadata catalogue. If the parameter per_platform is True, it returns a dictionary with platform names as keys and the number of services assets from that platform as values.</p>"},{"location":"api/services/#aiod.services.get_asset","title":"<code>get_asset(identifier, *, version=None, data_format='pandas')</code>","text":"<p>Retrieve metadata for a specific services.</p> <p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>int</code> <p>The identifier of the services to retrieve.</p> required <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a dict.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>Series | dict</code> <p>The retrieved metadata for the specified services.</p>"},{"location":"api/services/#aiod.services.get_asset_from_platform","title":"<code>get_asset_from_platform(*, platform, platform_identifier, version=None, data_format='pandas')</code>","text":"<p>Retrieve metadata for a specific services identified by the external platform identifier.</p> <p>Parameters:</p> Name Type Description Default <code>platform</code> <code>str</code> <p>The platform where the services asset is retrieved from.</p> required <code>platform_identifier</code> <code>str</code> <p>The identifier under which the services is known by the platform.</p> required <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a dict.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>Series | dict</code> <p>The retrieved metadata for the specified services.</p>"},{"location":"api/services/#aiod.services.get_assets_async","title":"<code>get_assets_async(identifiers, *, version=None, data_format='pandas')</code>  <code>async</code>","text":"<p>Asynchronously retrieve metadata for a list of services identifiers.</p> <p>Parameters:</p> Name Type Description Default <code>identifiers</code> <code>list[int]</code> <p>The list of identifiers of the services to retrieve.</p> required <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a list of dicts.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>DataFrame | list[dict]</code> <p>The retrieved metadata for the specified services.</p>"},{"location":"api/services/#aiod.services.get_content","title":"<code>get_content(*, identifier, distribution_idx=0, version=None)</code>","text":"<p>Retrieve the data content of a specific services.</p> <p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>int</code> <p>The identifier of the services asset.</p> required <code>distribution_idx</code> <code>int</code> <p>The index of a specific distribution from the distribution list (default is 0).</p> <code>0</code> <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <p>Returns:</p> Type Description <code>bytes</code> <p>The data content for the specified services.</p>"},{"location":"api/services/#aiod.services.get_list","title":"<code>get_list(*, platform=None, offset=0, limit=10, version=None, data_format='pandas')</code>","text":"<p>Retrieve a list of services from the catalogue.</p> <p>Parameters:</p> Name Type Description Default <code>platform</code> <code>str | None</code> <p>Return metadata of services assets of this platform (default is None).</p> <code>None</code> <code>offset</code> <code>int</code> <p>The offset for pagination (default is 0).</p> <code>0</code> <code>limit</code> <code>int</code> <p>The maximum number of items to retrieve (default is 10).</p> <code>10</code> <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, i.e. in this case a list of dicts.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>DataFrame | list[dict]</code> <p>The retrieved metadata in the specified format.</p>"},{"location":"api/services/#aiod.services.get_list_async","title":"<code>get_list_async(*, offset=0, limit=100, batch_size=10, version=None, data_format='pandas')</code>  <code>async</code>","text":"<p>Asynchronously retrieve a list of services from the catalogue in batches.</p> <p>Parameters:</p> Name Type Description Default <code>offset</code> <code>int</code> <p>The offset for pagination (default is 0).</p> <code>0</code> <code>limit</code> <code>int</code> <p>The maximum number of items to retrieve (default is 10).</p> <code>100</code> <code>batch_size</code> <code>int</code> <p>The number of items in a a batch.</p> <code>10</code> <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a list of dicts.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>DataFrame | list[dict]</code> <p>The retrieved metadata in the specified format.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>Batch size must be larger than 0.</p>"},{"location":"api/services/#aiod.services.search","title":"<code>search(query, *, platforms=None, offset=0, limit=10, search_field=None, get_all=True, version=None, data_format='pandas', asset_type)</code>","text":"<p>Search metadata for services type using the Elasticsearch endpoint of the AIoD metadata catalogue.</p> <p>Parameters:</p> Name Type Description Default <code>search</code> <p>The string to be matched against the search fields.</p> required <code>platforms</code> <code>list[str] | None</code> <p>The platforms to filter the search results. If None, results from all platforms will be returned (default is None).</p> <code>None</code> <code>offset</code> <code>int</code> <p>The offset for pagination (default is 0).</p> <code>0</code> <code>limit</code> <code>int</code> <p>The maximum number of results to retrieve (default is 10).</p> <code>10</code> <code>search_field</code> <code>None | Literal['name', 'issn', 'description_html', 'description_plain']</code> <p>The specific fields to search within. If None, the query will be matched against all fields (default is None).</p> <code>None</code> <code>get_all</code> <code>bool</code> <p>If true, a request to the database is made to retrieve all data. If false, only the indexed information is returned. (default is True).</p> <code>True</code> <code>version</code> <code>str | None</code> <p>The version of the endpoint to use (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a list of dict's.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>DataFrame | list[dict]</code> <p>The retrieved metadata in the specified format.</p>"},{"location":"api/teams/","title":"Teams","text":""},{"location":"api/teams/#aiod.teams.counts","title":"<code>counts(*, version=None, per_platform=False)</code>","text":"<p>Retrieve the number of teams assets in the metadata catalogue.</p> <p>Parameters:</p> Name Type Description Default <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>per_platform</code> <code>bool</code> <p>Whether to list counts per platform (default is False).</p> <code>False</code> <p>Returns:</p> Type Description <code>int | dict[str, int]</code> <p>The number teams assets in the metadata catalogue. If the parameter per_platform is True, it returns a dictionary with platform names as keys and the number of teams assets from that platform as values.</p>"},{"location":"api/teams/#aiod.teams.get_asset","title":"<code>get_asset(identifier, *, version=None, data_format='pandas')</code>","text":"<p>Retrieve metadata for a specific teams.</p> <p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>int</code> <p>The identifier of the teams to retrieve.</p> required <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a dict.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>Series | dict</code> <p>The retrieved metadata for the specified teams.</p>"},{"location":"api/teams/#aiod.teams.get_asset_from_platform","title":"<code>get_asset_from_platform(*, platform, platform_identifier, version=None, data_format='pandas')</code>","text":"<p>Retrieve metadata for a specific teams identified by the external platform identifier.</p> <p>Parameters:</p> Name Type Description Default <code>platform</code> <code>str</code> <p>The platform where the teams asset is retrieved from.</p> required <code>platform_identifier</code> <code>str</code> <p>The identifier under which the teams is known by the platform.</p> required <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a dict.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>Series | dict</code> <p>The retrieved metadata for the specified teams.</p>"},{"location":"api/teams/#aiod.teams.get_assets_async","title":"<code>get_assets_async(identifiers, *, version=None, data_format='pandas')</code>  <code>async</code>","text":"<p>Asynchronously retrieve metadata for a list of teams identifiers.</p> <p>Parameters:</p> Name Type Description Default <code>identifiers</code> <code>list[int]</code> <p>The list of identifiers of the teams to retrieve.</p> required <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a list of dicts.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>DataFrame | list[dict]</code> <p>The retrieved metadata for the specified teams.</p>"},{"location":"api/teams/#aiod.teams.get_content","title":"<code>get_content(*, identifier, distribution_idx=0, version=None)</code>","text":"<p>Retrieve the data content of a specific teams.</p> <p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>int</code> <p>The identifier of the teams asset.</p> required <code>distribution_idx</code> <code>int</code> <p>The index of a specific distribution from the distribution list (default is 0).</p> <code>0</code> <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <p>Returns:</p> Type Description <code>bytes</code> <p>The data content for the specified teams.</p>"},{"location":"api/teams/#aiod.teams.get_list","title":"<code>get_list(*, platform=None, offset=0, limit=10, version=None, data_format='pandas')</code>","text":"<p>Retrieve a list of teams from the catalogue.</p> <p>Parameters:</p> Name Type Description Default <code>platform</code> <code>str | None</code> <p>Return metadata of teams assets of this platform (default is None).</p> <code>None</code> <code>offset</code> <code>int</code> <p>The offset for pagination (default is 0).</p> <code>0</code> <code>limit</code> <code>int</code> <p>The maximum number of items to retrieve (default is 10).</p> <code>10</code> <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, i.e. in this case a list of dicts.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>DataFrame | list[dict]</code> <p>The retrieved metadata in the specified format.</p>"},{"location":"api/teams/#aiod.teams.get_list_async","title":"<code>get_list_async(*, offset=0, limit=100, batch_size=10, version=None, data_format='pandas')</code>  <code>async</code>","text":"<p>Asynchronously retrieve a list of teams from the catalogue in batches.</p> <p>Parameters:</p> Name Type Description Default <code>offset</code> <code>int</code> <p>The offset for pagination (default is 0).</p> <code>0</code> <code>limit</code> <code>int</code> <p>The maximum number of items to retrieve (default is 10).</p> <code>100</code> <code>batch_size</code> <code>int</code> <p>The number of items in a a batch.</p> <code>10</code> <code>version</code> <code>str | None</code> <p>The version of the endpoint (default is None).</p> <code>None</code> <code>data_format</code> <code>Literal['pandas', 'json']</code> <p>The desired format for the response (default is \"pandas\"). For \"json\" formats, the returned type is a json decoded type, in this case a list of dicts.</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>DataFrame | list[dict]</code> <p>The retrieved metadata in the specified format.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>Batch size must be larger than 0.</p>"}]}